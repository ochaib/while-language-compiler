{
    "testcases/valid/advanced/binarySortTree.wacc": ".data\n\nmsg_0:\n\t.word 47\n\t.ascii\t\"Please enter the number of integers to insert: \"\nmsg_1:\n\t.word 10\n\t.ascii\t\"There are \"\nmsg_2:\n\t.word 10\n\t.ascii\t\" integers.\"\nmsg_3:\n\t.word 36\n\t.ascii\t\"Please enter the number at position \"\nmsg_4:\n\t.word 3\n\t.ascii\t\" : \"\nmsg_5:\n\t.word 29\n\t.ascii\t\"Here are the numbers sorted: \"\nmsg_6:\n\t.word 0\n\t.ascii\t\"\"\nmsg_7:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_8:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_9:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_10:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_11:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_12:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\n\n.text\n\n.global main\nf_createNewNode:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #16]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, [sp, #20]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #4]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #12]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, [sp, #4]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_insert:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, =0\n\tSTR r4, [sp, #-4]!\n\tLDR r4, =0\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #16]\n\tSTR r4, [sp, #-4]!\n\tBL f_createNewNode\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tB L1\nL0:\n\tSUB sp, sp, #12\n\tLDR r4, [sp, #16]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #8]\n\tLDR r4, [sp, #16]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #20]\n\tLDR r5, [sp, #4]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #0\n\tBEQ L2\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #20]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_insert\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tLDR r5, [sp, #8]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5]\n\tSTR r4, [r5]\n\tB L3\nL2:\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #20]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_insert\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tLDR r5, [sp, #8]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5, #4]\n\tSTR r4, [r5]\nL3:\n\tADD sp, sp, #12\nL1:\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_printTree:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L4\n\tLDR r4, =0\n\tMOV r0, r4\n\tPOP {pc}\n\tB L5\nL4:\n\tSUB sp, sp, #12\n\tLDR r4, [sp, #16]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #8]\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_printTree\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #16]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tMOV r4, #' '\n\tMOV r0, r4\n\tBL putchar\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_printTree\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, =0\n\tMOV r0, r4\n\tADD sp, sp, #12\n\tPOP {pc}\n\tADD sp, sp, #12\nL5:\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #12\n\tLDR r4, =0\n\tSTR r4, [sp, #8]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #8\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =0\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L6\nL7:\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #8]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_4\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, [sp]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #8]\n\tSTR r4, [sp, #-4]!\n\tBL f_insert\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #8]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #8]\n\tADD sp, sp, #4\nL6:\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp, #8]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #1\n\tBEQ L7\n\tLDR r4, =msg_5\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp]\n\tSTR r4, [sp, #-4]!\n\tBL f_printTree\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r4, =msg_6\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #12\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_7\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_8\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_9\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_10\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_11\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_12\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/advanced/hashTable.wacc": ".data\n\nmsg_0:\n\t.word 0\n\t.ascii\t\"\"\nmsg_1:\n\t.word 43\n\t.ascii\t\"===========================================\"\nmsg_2:\n\t.word 43\n\t.ascii\t\"========== Hash Table Program =============\"\nmsg_3:\n\t.word 43\n\t.ascii\t\"===========================================\"\nmsg_4:\n\t.word 43\n\t.ascii\t\"=                                         =\"\nmsg_5:\n\t.word 43\n\t.ascii\t\"= Please choose the following options:    =\"\nmsg_6:\n\t.word 43\n\t.ascii\t\"=                                         =\"\nmsg_7:\n\t.word 43\n\t.ascii\t\"= a: insert an integer                    =\"\nmsg_8:\n\t.word 43\n\t.ascii\t\"= b: find an integer                      =\"\nmsg_9:\n\t.word 43\n\t.ascii\t\"= c: count the integers                   =\"\nmsg_10:\n\t.word 43\n\t.ascii\t\"= d: print all integers                   =\"\nmsg_11:\n\t.word 43\n\t.ascii\t\"= e: remove an integer                    =\"\nmsg_12:\n\t.word 43\n\t.ascii\t\"= f: remove all integers                  =\"\nmsg_13:\n\t.word 43\n\t.ascii\t\"= g: exit                                 =\"\nmsg_14:\n\t.word 43\n\t.ascii\t\"=                                         =\"\nmsg_15:\n\t.word 43\n\t.ascii\t\"===========================================\"\nmsg_16:\n\t.word 15\n\t.ascii\t\"Your decision: \"\nmsg_17:\n\t.word 18\n\t.ascii\t\"You have entered: \"\nmsg_18:\n\t.word 36\n\t.ascii\t\" which is invalid, please try again.\"\nmsg_19:\n\t.word 18\n\t.ascii\t\"You have entered: \"\nmsg_20:\n\t.word 35\n\t.ascii\t\"Please enter an integer to insert: \"\nmsg_21:\n\t.word 43\n\t.ascii\t\"Successfully insert it. The integer is new.\"\nmsg_22:\n\t.word 51\n\t.ascii\t\"The integer is already there. No insertion is made.\"\nmsg_23:\n\t.word 33\n\t.ascii\t\"Please enter an integer to find: \"\nmsg_24:\n\t.word 17\n\t.ascii\t\"Find the integer.\"\nmsg_25:\n\t.word 25\n\t.ascii\t\"The integer is not found.\"\nmsg_26:\n\t.word 24\n\t.ascii\t\"There is only 1 integer.\"\nmsg_27:\n\t.word 10\n\t.ascii\t\"There are \"\nmsg_28:\n\t.word 10\n\t.ascii\t\" integers.\"\nmsg_29:\n\t.word 23\n\t.ascii\t\"Here are the integers: \"\nmsg_30:\n\t.word 35\n\t.ascii\t\"Please enter an integer to remove: \"\nmsg_31:\n\t.word 29\n\t.ascii\t\"The integer has been removed.\"\nmsg_32:\n\t.word 25\n\t.ascii\t\"The integer is not found.\"\nmsg_33:\n\t.word 31\n\t.ascii\t\"All integers have been removed.\"\nmsg_34:\n\t.word 13\n\t.ascii\t\"Goodbye Human\"\nmsg_35:\n\t.word 23\n\t.ascii\t\"Error: unknown choice (\"\nmsg_36:\n\t.word 1\n\t.ascii\t\")\"\nmsg_37:\n\t.word 44\n\t.ascii\t\"ArrayIndexOutOfBoundsError: negative index\\n\\0\"\nmsg_38:\n\t.word 45\n\t.ascii\t\"ArrayIndexOutOfBoundsError: index too large\\n\\0\"\nmsg_39:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_40:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_41:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_42:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_43:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_44:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_45:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_46:\n\t.word 4\n\t.ascii\t\" %c\\0\"\nmsg_47:\n\t.word 3\n\t.ascii\t\"%d\\0\"\n\n.text\n\n.global main\nf_init:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, [sp, #12]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L0\nL1:\n\tLDR r4, =0\n\tADD r5, sp, #12\n\tLDR r6, [sp]\n\tLDR r5, [r5]\n\tMOV r0, r6\n\tMOV r1, r5\n\tBL p_check_array_bounds\n\tADD r5, r5, #4\n\tADD r5, r5, r6, LSL #2\n\tSTR r4, [r5]\n\tLDR r4, [sp]\n\tLDR r6, =1\n\tADDS r4, r4, r6\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\nL0:\n\tLDR r4, [sp]\n\tLDR r6, [sp, #4]\n\tCMP r4, r6\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_contain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, [sp, #16]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #16]\n\tSTR r4, [sp, #-4]!\n\tBL f_calculateIndex\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #16]\n\tSTR r4, [sp, #-4]!\n\tADD r4, sp, #16\n\tLDR r5, [sp, #8]\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #-4]!\n\tBL f_findNode\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_insertIfNotContain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, [sp, #16]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #16]\n\tSTR r4, [sp, #-4]!\n\tBL f_calculateIndex\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #16]\n\tSTR r4, [sp, #-4]!\n\tADD r4, sp, #16\n\tLDR r5, [sp, #8]\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #-4]!\n\tBL f_findNode\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tCMP r4, #0\n\tBEQ L2\n\tMOV r4, #0\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tB L3\nL2:\n\tSUB sp, sp, #4\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #20]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tADD r5, sp, #16\n\tLDR r6, [sp, #8]\n\tLDR r5, [r5]\n\tMOV r0, r6\n\tMOV r1, r5\n\tBL p_check_array_bounds\n\tADD r5, r5, #4\n\tADD r5, r5, r6, LSL #2\n\tLDR r5, [r5]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tADD r5, sp, #16\n\tLDR r6, [sp, #8]\n\tLDR r5, [r5]\n\tMOV r0, r6\n\tMOV r1, r5\n\tBL p_check_array_bounds\n\tADD r5, r5, #4\n\tADD r5, r5, r6, LSL #2\n\tSTR r4, [r5]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #12\n\tPOP {pc}\n\tADD sp, sp, #4\nL3:\n\tPOP {pc}\n\t.ltorg\nf_remove:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, [sp, #16]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #16]\n\tSTR r4, [sp, #-4]!\n\tBL f_calculateIndex\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #16]\n\tSTR r4, [sp, #-4]!\n\tADD r4, sp, #16\n\tLDR r5, [sp, #8]\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #-4]!\n\tBL f_findNode\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L4\n\tMOV r4, #0\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tB L5\nL4:\n\tLDR r4, [sp]\n\tSTR r4, [sp, #-4]!\n\tADD r4, sp, #16\n\tLDR r5, [sp, #8]\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #-4]!\n\tBL f_removeNode\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tADD r5, sp, #12\n\tLDR r6, [sp, #4]\n\tLDR r5, [r5]\n\tMOV r0, r6\n\tMOV r1, r5\n\tBL p_check_array_bounds\n\tADD r5, r5, #4\n\tADD r5, r5, r6, LSL #2\n\tSTR r4, [r5]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\nL5:\n\tPOP {pc}\n\t.ltorg\nf_removeAll:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, [sp, #12]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L6\nL7:\n\tSUB sp, sp, #4\n\tADD r4, sp, #16\n\tLDR r5, [sp, #4]\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tB L8\nL9:\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_free_pair\n\tLDR r4, [sp]\n\tSTR r4, [sp, #4]\n\tADD sp, sp, #4\nL8:\n\tLDR r4, [sp]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tCMP r4, #1\n\tBEQ L9\n\tLDR r4, =0\n\tADD r5, sp, #16\n\tLDR r6, [sp, #4]\n\tLDR r5, [r5]\n\tMOV r0, r6\n\tMOV r1, r5\n\tBL p_check_array_bounds\n\tADD r5, r5, #4\n\tADD r5, r5, r6, LSL #2\n\tSTR r4, [r5]\n\tLDR r4, [sp, #4]\n\tLDR r6, =1\n\tADDS r4, r4, r6\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #4]\n\tADD sp, sp, #4\nL6:\n\tLDR r4, [sp]\n\tLDR r6, [sp, #4]\n\tCMP r4, r6\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #1\n\tBEQ L7\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_count:\n\tPUSH {lr}\n\tSUB sp, sp, #12\n\tLDR r4, [sp, #16]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #8]\n\tLDR r4, =0\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L10\nL11:\n\tSUB sp, sp, #4\n\tADD r4, sp, #20\n\tLDR r5, [sp, #4]\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #-4]!\n\tBL f_countNodes\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #8]\n\tLDR r4, [sp, #4]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #4]\n\tADD sp, sp, #4\nL10:\n\tLDR r4, [sp]\n\tLDR r5, [sp, #8]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #1\n\tBEQ L11\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tADD sp, sp, #12\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_printAll:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, [sp, #12]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L12\nL13:\n\tSUB sp, sp, #1\n\tADD r4, sp, #13\n\tLDR r5, [sp, #1]\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #-4]!\n\tBL f_printAllNodes\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #1]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #1]\n\tADD sp, sp, #1\nL12:\n\tLDR r4, [sp]\n\tLDR r5, [sp, #4]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #1\n\tBEQ L13\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_calculateIndex:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #8]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #12]\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idivmod\n\tMOV r4, r1\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_findNode:\n\tPUSH {lr}\n\tB L14\nL15:\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tLDR r5, [sp, #12]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L16\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tB L17\nL16:\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #8]\nL17:\n\tADD sp, sp, #4\nL14:\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tCMP r4, #1\n\tBEQ L15\n\tLDR r4, =0\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_removeNode:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L18\n\tLDR r4, =0\n\tMOV r0, r4\n\tPOP {pc}\n\tB L19\nL18:\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp, #8]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L20\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_free_pair\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tPOP {pc}\n\tB L21\nL20:\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #12]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_removeNode\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tLDR r5, [sp, #8]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5, #4]\n\tSTR r4, [r5]\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tADD sp, sp, #4\nL21:\nL19:\n\tPOP {pc}\n\t.ltorg\nf_countNodes:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L22\nL23:\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #8]\nL22:\n\tLDR r4, [sp, #8]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tCMP r4, #1\n\tBEQ L23\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_printAllNodes:\n\tPUSH {lr}\n\tB L24\nL25:\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tMOV r4, #' '\n\tMOV r0, r4\n\tBL putchar\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #8]\n\tADD sp, sp, #4\nL24:\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tCMP r4, #1\n\tBEQ L25\n\tMOV r4, #1\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_printMenu:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_4\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_5\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_6\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_7\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_8\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_9\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_10\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_11\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_12\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_13\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_14\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_15\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tMOV r4, #'a'\n\tSTR r4, [sp, #4]\n\tMOV r4, #'g'\n\tSTR r4, [sp]\n\tB L26\nL27:\n\tSUB sp, sp, #5\n\tLDR r4, =msg_16\n\tMOV r0, r4\n\tBL p_print_string\n\tMOV r4, #0\n\tSTRB r4, [sp, #4]\n\tADD r4, sp, #4\n\tMOV r0, r4\n\tBL p_read_char\n\tLDRSB r4, [sp, #4]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #9]\n\tLDR r5, [sp]\n\tCMP r4, r5\n\tMOVLE r4, #1\n\tMOVGT r4, #0\n\tLDR r5, [sp]\n\tLDR r6, [sp, #5]\n\tCMP r5, r6\n\tMOVLE r5, #1\n\tMOVGT r5, #0\n\tAND r4, r4, r5\n\tCMP r4, #0\n\tBEQ L28\n\tLDRSB r4, [sp, #4]\n\tMOV r0, r4\n\tADD sp, sp, #13\n\tPOP {pc}\n\tB L29\nL28:\n\tLDR r4, =msg_17\n\tMOV r0, r4\n\tBL p_print_string\n\tLDRSB r4, [sp, #4]\n\tMOV r0, r4\n\tBL putchar\n\tLDR r4, =msg_18\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL29:\n\tADD sp, sp, #5\nL26:\n\tMOV r4, #1\n\tCMP r4, #1\n\tBEQ L27\n\tMOV r4, #0\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_askForInt:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, =msg_19\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_handleMenuInsert:\n\tPUSH {lr}\n\tSUB sp, sp, #5\n\tLDR r4, =msg_20\n\tSTR r4, [sp, #-4]!\n\tBL f_askForInt\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tBL f_insertIfNotContain\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L30\n\tLDR r4, =msg_21\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L31\nL30:\n\tLDR r4, =msg_22\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL31:\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #5\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_handleMenuFind:\n\tPUSH {lr}\n\tSUB sp, sp, #5\n\tLDR r4, =msg_23\n\tSTR r4, [sp, #-4]!\n\tBL f_askForInt\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tBL f_contain\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L32\n\tLDR r4, =msg_24\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L33\nL32:\n\tLDR r4, =msg_25\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL33:\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #5\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_handleMenuCount:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #8]\n\tSTR r4, [sp, #-4]!\n\tBL f_count\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L34\n\tLDR r4, =msg_26\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L35\nL34:\n\tLDR r4, =msg_27\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_28\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL35:\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_handleMenuPrint:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tLDR r4, =msg_29\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_printAll\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #1\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_handleMenuRemove:\n\tPUSH {lr}\n\tSUB sp, sp, #5\n\tLDR r4, =msg_30\n\tSTR r4, [sp, #-4]!\n\tBL f_askForInt\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tBL f_remove\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L36\n\tLDR r4, =msg_31\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L37\nL36:\n\tLDR r4, =msg_32\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL37:\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #5\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_handleMenuRemoveAll:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_removeAll\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, =msg_33\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #1\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #6\n\tLDR r0, =56\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =0\n\tSTR r5, [r4, #4]\n\tLDR r5, =0\n\tSTR r5, [r4, #8]\n\tLDR r5, =0\n\tSTR r5, [r4, #12]\n\tLDR r5, =0\n\tSTR r5, [r4, #16]\n\tLDR r5, =0\n\tSTR r5, [r4, #20]\n\tLDR r5, =0\n\tSTR r5, [r4, #24]\n\tLDR r5, =0\n\tSTR r5, [r4, #28]\n\tLDR r5, =0\n\tSTR r5, [r4, #32]\n\tLDR r5, =0\n\tSTR r5, [r4, #36]\n\tLDR r5, =0\n\tSTR r5, [r4, #40]\n\tLDR r5, =0\n\tSTR r5, [r4, #44]\n\tLDR r5, =0\n\tSTR r5, [r4, #48]\n\tLDR r5, =0\n\tSTR r5, [r4, #52]\n\tLDR r5, =13\n\tSTR r5, [r4]\n\tSTR r4, [sp, #2]\n\tLDR r4, [sp, #2]\n\tSTR r4, [sp, #-4]!\n\tBL f_init\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp, #1]\n\tMOV r4, #1\n\tSTRB r4, [sp]\n\tB L38\nL39:\n\tSUB sp, sp, #1\n\tBL f_printMenu\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r5, #'a'\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L40\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_handleMenuInsert\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tB L41\nL40:\n\tLDRSB r4, [sp]\n\tMOV r5, #'b'\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L42\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_handleMenuFind\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tB L43\nL42:\n\tLDRSB r4, [sp]\n\tMOV r5, #'c'\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L44\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_handleMenuCount\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tB L45\nL44:\n\tLDRSB r4, [sp]\n\tMOV r5, #'d'\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L46\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_handleMenuPrint\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tB L47\nL46:\n\tLDRSB r4, [sp]\n\tMOV r5, #'e'\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L48\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_handleMenuRemove\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tB L49\nL48:\n\tLDRSB r4, [sp]\n\tMOV r5, #'f'\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L50\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_handleMenuRemoveAll\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tB L51\nL50:\n\tLDRSB r4, [sp]\n\tMOV r5, #'g'\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L52\n\tLDR r4, =msg_34\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tMOV r4, #0\n\tSTRB r4, [sp, #1]\n\tB L53\nL52:\n\tLDR r4, =msg_35\n\tMOV r0, r4\n\tBL p_print_string\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL putchar\n\tLDR r4, =msg_36\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =-1\n\tMOV r0, r4\n\tBL exit\nL53:\nL51:\nL49:\nL47:\nL45:\nL43:\nL41:\n\tADD sp, sp, #1\nL38:\n\tLDRSB r4, [sp]\n\tCMP r4, #1\n\tBEQ L39\n\tADD sp, sp, #6\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_array_bounds:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRLT r0, =msg_37\n\tBLLT p_throw_runtime_error\n\tLDR r1, [r1]\n\tCMP r0, r1\n\tLDRCS r0, =msg_38\n\tBLCS p_throw_runtime_error\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_39\n\tBL p_throw_runtime_error\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_40\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_free_pair:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_41\n\tBEQ p_throw_runtime_error\n\tPUSH {r0}\n\tLDR r0, [r0]\n\tBL free\n\tLDR r0, [sp]\n\tLDR r0, [r0, #4]\n\tBL free\n\tPOP {r0}\n\tBL free\n\tPOP {pc}\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_42\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_43\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_44\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_45\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_char:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_46\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_47\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/advanced/ticTacToe.wacc": ".data\n\nmsg_0:\n\t.word 38\n\t.ascii\t\"========= Tic Tac Toe ================\"\nmsg_1:\n\t.word 38\n\t.ascii\t\"=  Because we know you want to win   =\"\nmsg_2:\n\t.word 38\n\t.ascii\t\"======================================\"\nmsg_3:\n\t.word 38\n\t.ascii\t\"=                                    =\"\nmsg_4:\n\t.word 38\n\t.ascii\t\"= Who would you like to be?          =\"\nmsg_5:\n\t.word 38\n\t.ascii\t\"=   x  (play first)                  =\"\nmsg_6:\n\t.word 38\n\t.ascii\t\"=   o  (play second)                 =\"\nmsg_7:\n\t.word 38\n\t.ascii\t\"=   q  (quit)                        =\"\nmsg_8:\n\t.word 38\n\t.ascii\t\"=                                    =\"\nmsg_9:\n\t.word 38\n\t.ascii\t\"======================================\"\nmsg_10:\n\t.word 39\n\t.ascii\t\"Which symbol you would like to choose: \"\nmsg_11:\n\t.word 15\n\t.ascii\t\"Goodbye safety.\"\nmsg_12:\n\t.word 16\n\t.ascii\t\"Invalid symbol: \"\nmsg_13:\n\t.word 17\n\t.ascii\t\"Please try again.\"\nmsg_14:\n\t.word 17\n\t.ascii\t\"You have chosen: \"\nmsg_15:\n\t.word 6\n\t.ascii\t\" 1 2 3\"\nmsg_16:\n\t.word 1\n\t.ascii\t\"1\"\nmsg_17:\n\t.word 6\n\t.ascii\t\" -+-+-\"\nmsg_18:\n\t.word 1\n\t.ascii\t\"2\"\nmsg_19:\n\t.word 6\n\t.ascii\t\" -+-+-\"\nmsg_20:\n\t.word 1\n\t.ascii\t\"3\"\nmsg_21:\n\t.word 0\n\t.ascii\t\"\"\nmsg_22:\n\t.word 0\n\t.ascii\t\"\"\nmsg_23:\n\t.word 23\n\t.ascii\t\"What is your next move?\"\nmsg_24:\n\t.word 12\n\t.ascii\t\" row (1-3): \"\nmsg_25:\n\t.word 15\n\t.ascii\t\" column (1-3): \"\nmsg_26:\n\t.word 0\n\t.ascii\t\"\"\nmsg_27:\n\t.word 39\n\t.ascii\t\"Your move is invalid. Please try again.\"\nmsg_28:\n\t.word 21\n\t.ascii\t\"The AI played at row \"\nmsg_29:\n\t.word 8\n\t.ascii\t\" column \"\nmsg_30:\n\t.word 31\n\t.ascii\t\"AI is cleaning up its memory...\"\nmsg_31:\n\t.word 52\n\t.ascii\t\"Internal Error: cannot find the next move for the AI\"\nmsg_32:\n\t.word 31\n\t.ascii\t\"AI is cleaning up its memory...\"\nmsg_33:\n\t.word 50\n\t.ascii\t\"Internal Error: symbol given is neither \\'x\\' or \\'o\\'\"\nmsg_34:\n\t.word 58\n\t.ascii\t\"Initialising AI. Please wait, this may take a few minutes.\"\nmsg_35:\n\t.word 9\n\t.ascii\t\" has won!\"\nmsg_36:\n\t.word 10\n\t.ascii\t\"Stalemate!\"\nmsg_37:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_38:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_39:\n\t.word 4\n\t.ascii\t\" %c\\0\"\nmsg_40:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_41:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_42:\n\t.word 44\n\t.ascii\t\"ArrayIndexOutOfBoundsError: negative index\\n\\0\"\nmsg_43:\n\t.word 45\n\t.ascii\t\"ArrayIndexOutOfBoundsError: index too large\\n\\0\"\nmsg_44:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_45:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_46:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\n\n.text\n\n.global main\nf_chooseSymbol:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_4\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_5\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_6\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_7\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_8\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_9\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tMOV r4, #0\n\tSTRB r4, [sp]\n\tB L0\nL1:\n\tSUB sp, sp, #1\n\tLDR r4, =msg_10\n\tMOV r0, r4\n\tBL p_print_string\n\tMOV r4, #0\n\tSTRB r4, [sp]\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_char\n\tLDRSB r4, [sp]\n\tMOV r5, #'x'\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tLDRSB r5, [sp]\n\tMOV r6, #'X'\n\tCMP r5, r6\n\tMOVEQ r5, #1\n\tMOVNE r5, #0\n\tORR r4, r4, r5\n\tCMP r4, #0\n\tBEQ L2\n\tMOV r4, #'x'\n\tSTRB r4, [sp, #1]\n\tB L3\nL2:\n\tLDRSB r4, [sp]\n\tMOV r5, #'o'\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tLDRSB r5, [sp]\n\tMOV r6, #'O'\n\tCMP r5, r6\n\tMOVEQ r5, #1\n\tMOVNE r5, #0\n\tORR r4, r4, r5\n\tCMP r4, #0\n\tBEQ L4\n\tMOV r4, #'o'\n\tSTRB r4, [sp, #1]\n\tB L5\nL4:\n\tLDRSB r4, [sp]\n\tMOV r5, #'q'\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tLDRSB r5, [sp]\n\tMOV r6, #'Q'\n\tCMP r5, r6\n\tMOVEQ r5, #1\n\tMOVNE r5, #0\n\tORR r4, r4, r5\n\tCMP r4, #0\n\tBEQ L6\n\tLDR r4, =msg_11\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =0\n\tMOV r0, r4\n\tBL exit\n\tB L7\nL6:\n\tLDR r4, =msg_12\n\tMOV r0, r4\n\tBL p_print_string\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tLDR r4, =msg_13\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL7:\nL5:\nL3:\n\tADD sp, sp, #1\nL0:\n\tLDRSB r4, [sp]\n\tMOV r5, #0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, =msg_14\n\tMOV r0, r4\n\tBL p_print_string\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #1\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_printBoard:\n\tPUSH {lr}\n\tSUB sp, sp, #17\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, =msg_15\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_16\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tBL f_printRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, =msg_17\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_18\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_printRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, =msg_19\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_20\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tBL f_printRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, =msg_21\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #17\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_printRow:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, [sp, #12]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #3]\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #2]\n\tLDR r4, [sp, #12]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #1]\n\tLDRSB r4, [sp, #3]\n\tSTRB r4, [sp, #-1]!\n\tBL f_printCell\n\tADD sp, sp, #1\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tMOV r4, #'|'\n\tMOV r0, r4\n\tBL putchar\n\tLDRSB r4, [sp, #2]\n\tSTRB r4, [sp, #-1]!\n\tBL f_printCell\n\tADD sp, sp, #1\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tMOV r4, #'|'\n\tMOV r0, r4\n\tBL putchar\n\tLDRSB r4, [sp, #1]\n\tSTRB r4, [sp, #-1]!\n\tBL f_printCell\n\tADD sp, sp, #1\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, =msg_22\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_printCell:\n\tPUSH {lr}\n\tLDRSB r4, [sp, #4]\n\tMOV r5, #0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L8\n\tMOV r4, #' '\n\tMOV r0, r4\n\tBL putchar\n\tB L9\nL8:\n\tLDRSB r4, [sp, #4]\n\tMOV r0, r4\n\tBL putchar\nL9:\n\tMOV r4, #1\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_askForAMoveHuman:\n\tPUSH {lr}\n\tSUB sp, sp, #9\n\tMOV r4, #0\n\tSTRB r4, [sp, #8]\n\tLDR r4, =0\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L10\nL11:\n\tLDR r4, =msg_23\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_24\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #4\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, =msg_25\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, [sp]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #8]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #-4]!\n\tBL f_validateMove\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp, #8]\n\tLDRSB r4, [sp, #8]\n\tCMP r4, #0\n\tBEQ L12\n\tLDR r4, =msg_26\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, [sp, #4]\n\tADD r5, sp, #17\n\tLDR r6, =0\n\tLDR r5, [r5]\n\tMOV r0, r6\n\tMOV r1, r5\n\tBL p_check_array_bounds\n\tADD r5, r5, #4\n\tADD r5, r5, r6, LSL #2\n\tSTR r4, [r5]\n\tLDR r4, [sp]\n\tADD r6, sp, #17\n\tLDR r7, =1\n\tLDR r6, [r6]\n\tMOV r0, r7\n\tMOV r1, r6\n\tBL p_check_array_bounds\n\tADD r6, r6, #4\n\tADD r6, r6, r7, LSL #2\n\tSTR r4, [r6]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #9\n\tPOP {pc}\n\tB L13\nL12:\n\tLDR r4, =msg_27\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL13:\nL10:\n\tLDRSB r4, [sp, #8]\n\tEOR r4, r4, #1\n\tCMP r4, #1\n\tBEQ L11\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #9\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_validateMove:\n\tPUSH {lr}\n\tLDR r4, =1\n\tLDR r5, [sp, #8]\n\tCMP r4, r5\n\tMOVLE r4, #1\n\tMOVGT r4, #0\n\tLDR r5, [sp, #8]\n\tLDR r6, =3\n\tCMP r5, r6\n\tMOVLE r5, #1\n\tMOVGT r5, #0\n\tAND r4, r4, r5\n\tLDR r5, =1\n\tLDR r6, [sp, #12]\n\tCMP r5, r6\n\tMOVLE r5, #1\n\tMOVGT r5, #0\n\tAND r4, r4, r5\n\tLDR r5, [sp, #12]\n\tLDR r6, =3\n\tCMP r5, r6\n\tMOVLE r5, #1\n\tMOVGT r5, #0\n\tAND r4, r4, r5\n\tCMP r4, #0\n\tBEQ L14\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tBL f_symbolAt\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r5, #0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tMOV r0, r4\n\tADD sp, sp, #1\n\tPOP {pc}\n\tADD sp, sp, #1\n\tB L15\nL14:\n\tMOV r4, #0\n\tMOV r0, r4\n\tPOP {pc}\nL15:\n\tPOP {pc}\n\t.ltorg\nf_notifyMoveHuman:\n\tPUSH {lr}\n\tLDR r4, =msg_28\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #10]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_29\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #14]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tMOV r4, #1\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_initAI:\n\tPUSH {lr}\n\tSUB sp, sp, #16\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDRSB r5, [sp, #20]\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, =0\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #12]\n\tLDRSB r4, [sp, #20]\n\tSTRB r4, [sp, #-1]!\n\tBL f_generateAllPossibleStates\n\tADD sp, sp, #1\n\tMOV r4, r0\n\tSTR r4, [sp, #8]\n\tMOV r4, #'x'\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #21]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #10]\n\tSTR r4, [sp, #-4]!\n\tBL f_setValuesForAllStates\n\tADD sp, sp, #6\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #12]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, [sp, #8]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #16\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_generateAllPossibleStates:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tBL f_allocateNewBoard\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_convertFromBoardToState\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tMOV r4, #'x'\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tBL f_generateNextStates\n\tADD sp, sp, #5\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_convertFromBoardToState:\n\tPUSH {lr}\n\tSUB sp, sp, #12\n\tBL f_generateEmptyPointerBoard\n\tMOV r4, r0\n\tSTR r4, [sp, #8]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #16]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, [sp, #8]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #4]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #4]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, =0\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #12\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_generateEmptyPointerBoard:\n\tPUSH {lr}\n\tSUB sp, sp, #20\n\tBL f_generateEmptyPointerRow\n\tMOV r4, r0\n\tSTR r4, [sp, #16]\n\tBL f_generateEmptyPointerRow\n\tMOV r4, r0\n\tSTR r4, [sp, #12]\n\tBL f_generateEmptyPointerRow\n\tMOV r4, r0\n\tSTR r4, [sp, #8]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #16]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, [sp, #12]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #4]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #4]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, [sp, #8]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #20\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_generateEmptyPointerRow:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =0\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, =0\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #4]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #4]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, =0\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_generateNextStates:\n\tPUSH {lr}\n\tSUB sp, sp, #14\n\tLDR r4, [sp, #18]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #10]\n\tLDR r4, [sp, #10]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #6]\n\tLDR r4, [sp, #10]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #2]\n\tLDRSB r4, [sp, #22]\n\tSTRB r4, [sp, #-1]!\n\tBL f_oppositeSymbol\n\tADD sp, sp, #1\n\tMOV r4, r0\n\tSTRB r4, [sp, #1]\n\tLDRSB r4, [sp, #1]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #7]\n\tSTR r4, [sp, #-4]!\n\tBL f_hasWon\n\tADD sp, sp, #5\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L16\n\tLDR r4, [sp, #18]\n\tMOV r0, r4\n\tADD sp, sp, #14\n\tPOP {pc}\n\tB L17\nL16:\n\tSUB sp, sp, #1\n\tLDRSB r4, [sp, #23]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #12]\n\tSTR r4, [sp, #-4]!\n\tBL f_generateNextStatesBoard\n\tADD sp, sp, #9\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #19]\n\tMOV r0, r4\n\tADD sp, sp, #15\n\tPOP {pc}\n\tADD sp, sp, #1\nL17:\n\tPOP {pc}\n\t.ltorg\nf_generateNextStatesBoard:\n\tPUSH {lr}\n\tSUB sp, sp, #33\n\tLDR r4, [sp, #37]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #29]\n\tLDR r4, [sp, #29]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #25]\n\tLDR r4, [sp, #29]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #21]\n\tLDR r4, [sp, #37]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #17]\n\tLDR r4, [sp, #41]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #41]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, =1\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #49]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #14]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #34]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #50]\n\tSTR r4, [sp, #-4]!\n\tBL f_generateNextStatesRow\n\tADD sp, sp, #17\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, =2\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #49]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #10]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #30]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #50]\n\tSTR r4, [sp, #-4]!\n\tBL f_generateNextStatesRow\n\tADD sp, sp, #17\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, =3\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #49]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #6]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #26]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #50]\n\tSTR r4, [sp, #-4]!\n\tBL f_generateNextStatesRow\n\tADD sp, sp, #17\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #33\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_generateNextStatesRow:\n\tPUSH {lr}\n\tSUB sp, sp, #11\n\tLDR r4, [sp, #19]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #7]\n\tLDR r4, [sp, #7]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #6]\n\tLDR r4, [sp, #7]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #5]\n\tLDR r4, [sp, #19]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #4]\n\tLDR r4, [sp, #23]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, =1\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #32]\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #35]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #15]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #25]\n\tSTR r4, [sp, #-4]!\n\tBL f_generateNextStatesCell\n\tADD sp, sp, #14\n\tMOV r4, r0\n\tLDR r5, [sp]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5]\n\tSTR r4, [r5]\n\tLDR r4, =2\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #32]\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #35]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #14]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #25]\n\tSTR r4, [sp, #-4]!\n\tBL f_generateNextStatesCell\n\tADD sp, sp, #14\n\tMOV r4, r0\n\tLDR r5, [sp]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5, #4]\n\tSTR r4, [r5]\n\tLDR r4, =3\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #32]\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #35]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #13]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #25]\n\tSTR r4, [sp, #-4]!\n\tBL f_generateNextStatesCell\n\tADD sp, sp, #14\n\tMOV r4, r0\n\tLDR r5, [sp, #23]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5, #4]\n\tSTR r4, [r5]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #11\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_generateNextStatesCell:\n\tPUSH {lr}\n\tLDRSB r4, [sp, #8]\n\tMOV r5, #0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L18\n\tSUB sp, sp, #10\n\tLDR r4, [sp, #14]\n\tSTR r4, [sp, #-4]!\n\tBL f_cloneBoard\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp, #6]\n\tLDR r4, [sp, #24]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #24]\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #27]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #15]\n\tSTR r4, [sp, #-4]!\n\tBL f_placeMove\n\tADD sp, sp, #13\n\tMOV r4, r0\n\tSTRB r4, [sp, #5]\n\tLDR r4, [sp, #6]\n\tSTR r4, [sp, #-4]!\n\tBL f_convertFromBoardToState\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp, #1]\n\tLDRSB r4, [sp, #19]\n\tSTRB r4, [sp, #-1]!\n\tBL f_oppositeSymbol\n\tADD sp, sp, #1\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #2]\n\tSTR r4, [sp, #-4]!\n\tBL f_generateNextStates\n\tADD sp, sp, #5\n\tMOV r4, r0\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #1]\n\tMOV r0, r4\n\tADD sp, sp, #10\n\tPOP {pc}\n\tADD sp, sp, #10\n\tB L19\nL18:\n\tLDR r4, =0\n\tMOV r0, r4\n\tPOP {pc}\nL19:\n\tPOP {pc}\n\t.ltorg\nf_cloneBoard:\n\tPUSH {lr}\n\tSUB sp, sp, #5\n\tBL f_allocateNewBoard\n\tMOV r4, r0\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tBL f_copyBoard\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #1]\n\tMOV r0, r4\n\tADD sp, sp, #5\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_copyBoard:\n\tPUSH {lr}\n\tSUB sp, sp, #33\n\tLDR r4, [sp, #37]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #29]\n\tLDR r4, [sp, #29]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #25]\n\tLDR r4, [sp, #29]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #21]\n\tLDR r4, [sp, #37]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #17]\n\tLDR r4, [sp, #41]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #41]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #29]\n\tSTR r4, [sp, #-4]!\n\tBL f_copyRow\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #25]\n\tSTR r4, [sp, #-4]!\n\tBL f_copyRow\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #-4]!\n\tBL f_copyRow\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #33\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_copyRow:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, [sp, #12]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #16]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDRSB r4, [r4]\n\tLDR r5, [sp]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5]\n\tSTRB r4, [r5]\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tLDR r5, [sp]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5, #4]\n\tSTRB r4, [r5]\n\tLDR r4, [sp, #12]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tLDR r5, [sp, #16]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5, #4]\n\tSTRB r4, [r5]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_setValuesForAllStates:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L20\n\tLDRSB r4, [sp, #13]\n\tLDRSB r5, [sp, #12]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L22\n\tLDR r4, =101\n\tSTR r4, [sp]\n\tB L23\nL22:\n\tLDR r4, =-101\n\tSTR r4, [sp]\nL23:\n\tB L21\nL20:\n\tSUB sp, sp, #14\n\tLDR r4, [sp, #22]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #10]\n\tLDR r4, [sp, #10]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #6]\n\tLDR r4, [sp, #10]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #2]\n\tLDRSB r4, [sp, #27]\n\tSTRB r4, [sp, #-1]!\n\tBL f_oppositeSymbol\n\tADD sp, sp, #1\n\tMOV r4, r0\n\tSTRB r4, [sp, #1]\n\tLDRSB r4, [sp, #1]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #7]\n\tSTR r4, [sp, #-4]!\n\tBL f_hasWon\n\tADD sp, sp, #5\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L24\n\tLDRSB r4, [sp, #1]\n\tLDRSB r5, [sp, #26]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L26\n\tLDR r4, =100\n\tSTR r4, [sp, #14]\n\tB L27\nL26:\n\tLDR r4, =-100\n\tSTR r4, [sp, #14]\nL27:\n\tB L25\nL24:\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #7]\n\tSTR r4, [sp, #-4]!\n\tBL f_containEmptyCell\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L28\n\tLDRSB r4, [sp, #2]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #28]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_calculateValuesFromNextStates\n\tADD sp, sp, #6\n\tMOV r4, r0\n\tSTR r4, [sp, #15]\n\tLDR r4, [sp, #15]\n\tLDR r5, =100\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L30\n\tLDR r4, =90\n\tSTR r4, [sp, #15]\n\tB L31\nL30:\nL31:\n\tB L29\nL28:\n\tLDR r4, =0\n\tSTR r4, [sp, #15]\nL29:\n\tADD sp, sp, #1\nL25:\n\tLDR r4, [sp, #14]\n\tLDR r5, [sp, #22]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5, #4]\n\tSTR r4, [r5]\n\tADD sp, sp, #14\nL21:\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_calculateValuesFromNextStates:\n\tPUSH {lr}\n\tSUB sp, sp, #32\n\tLDR r4, [sp, #36]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #28]\n\tLDR r4, [sp, #28]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #24]\n\tLDR r4, [sp, #28]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #20]\n\tLDR r4, [sp, #36]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #16]\n\tLDRSB r4, [sp, #41]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #41]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #26]\n\tSTR r4, [sp, #-4]!\n\tBL f_calculateValuesFromNextStatesRow\n\tADD sp, sp, #6\n\tMOV r4, r0\n\tSTR r4, [sp, #12]\n\tLDRSB r4, [sp, #41]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #41]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #22]\n\tSTR r4, [sp, #-4]!\n\tBL f_calculateValuesFromNextStatesRow\n\tADD sp, sp, #6\n\tMOV r4, r0\n\tSTR r4, [sp, #8]\n\tLDRSB r4, [sp, #41]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #41]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #18]\n\tSTR r4, [sp, #-4]!\n\tBL f_calculateValuesFromNextStatesRow\n\tADD sp, sp, #6\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #12]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #20]\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #53]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #53]\n\tSTRB r4, [sp, #-1]!\n\tBL f_combineValue\n\tADD sp, sp, #14\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #32\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_calculateValuesFromNextStatesRow:\n\tPUSH {lr}\n\tSUB sp, sp, #32\n\tLDR r4, [sp, #36]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #28]\n\tLDR r4, [sp, #28]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #24]\n\tLDR r4, [sp, #28]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #20]\n\tLDR r4, [sp, #36]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #16]\n\tLDRSB r4, [sp, #41]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #41]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #26]\n\tSTR r4, [sp, #-4]!\n\tBL f_setValuesForAllStates\n\tADD sp, sp, #6\n\tMOV r4, r0\n\tSTR r4, [sp, #12]\n\tLDRSB r4, [sp, #41]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #41]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #22]\n\tSTR r4, [sp, #-4]!\n\tBL f_setValuesForAllStates\n\tADD sp, sp, #6\n\tMOV r4, r0\n\tSTR r4, [sp, #8]\n\tLDRSB r4, [sp, #41]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #41]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #18]\n\tSTR r4, [sp, #-4]!\n\tBL f_setValuesForAllStates\n\tADD sp, sp, #6\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #12]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #20]\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #53]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #53]\n\tSTRB r4, [sp, #-1]!\n\tBL f_combineValue\n\tADD sp, sp, #14\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #32\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_combineValue:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDRSB r4, [sp, #8]\n\tLDRSB r5, [sp, #9]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L32\n\tLDR r4, [sp, #18]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #18]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #18]\n\tSTR r4, [sp, #-4]!\n\tBL f_min3\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tB L33\nL32:\n\tLDR r4, [sp, #18]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #18]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #18]\n\tSTR r4, [sp, #-4]!\n\tBL f_max3\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTR r4, [sp]\nL33:\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_min3:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp, #8]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #0\n\tBEQ L34\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp, #12]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #0\n\tBEQ L36\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tPOP {pc}\n\tB L37\nL36:\n\tLDR r4, [sp, #12]\n\tMOV r0, r4\n\tPOP {pc}\nL37:\n\tB L35\nL34:\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp, #12]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #0\n\tBEQ L38\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tPOP {pc}\n\tB L39\nL38:\n\tLDR r4, [sp, #12]\n\tMOV r0, r4\n\tPOP {pc}\nL39:\nL35:\n\tPOP {pc}\n\t.ltorg\nf_max3:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp, #8]\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tCMP r4, #0\n\tBEQ L40\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp, #12]\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tCMP r4, #0\n\tBEQ L42\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tPOP {pc}\n\tB L43\nL42:\n\tLDR r4, [sp, #12]\n\tMOV r0, r4\n\tPOP {pc}\nL43:\n\tB L41\nL40:\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp, #12]\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tCMP r4, #0\n\tBEQ L44\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tPOP {pc}\n\tB L45\nL44:\n\tLDR r4, [sp, #12]\n\tMOV r0, r4\n\tPOP {pc}\nL45:\nL41:\n\tPOP {pc}\n\t.ltorg\nf_destroyAI:\n\tPUSH {lr}\n\tSUB sp, sp, #9\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteStateTreeRecursively\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #5]\n\tMOV r0, r4\n\tBL p_free_pair\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_free_pair\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #9\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_askForAMoveAI:\n\tPUSH {lr}\n\tSUB sp, sp, #21\n\tLDR r4, [sp, #31]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #17]\n\tLDR r4, [sp, #31]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #9]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #35]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tBL f_findTheBestMove\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, =msg_30\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD r4, sp, #35\n\tLDR r5, =1\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #-4]!\n\tADD r4, sp, #39\n\tLDR r5, =0\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteAllOtherChildren\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tLDR r5, [sp, #31]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5, #4]\n\tSTR r4, [r5]\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteThisStateOnly\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #21\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_findTheBestMove:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #9]\n\tLDR r5, =90\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L46\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #14]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, =100\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #14]\n\tSTR r4, [sp, #-4]!\n\tBL f_findMoveWithGivenValue\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L48\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #2\n\tPOP {pc}\n\tB L49\nL48:\nL49:\n\tADD sp, sp, #1\n\tB L47\nL46:\nL47:\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tBL f_findMoveWithGivenValue\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L50\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #1\n\tPOP {pc}\n\tB L51\nL50:\n\tLDR r4, =msg_31\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =-1\n\tMOV r0, r4\n\tBL exit\nL51:\n\tPOP {pc}\n\t.ltorg\nf_findMoveWithGivenValue:\n\tPUSH {lr}\n\tSUB sp, sp, #17\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #29]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #29]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #17]\n\tSTR r4, [sp, #-4]!\n\tBL f_findMoveWithGivenValueRow\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L52\n\tLDR r4, =1\n\tADD r5, sp, #29\n\tLDR r6, =0\n\tLDR r5, [r5]\n\tMOV r0, r6\n\tMOV r1, r5\n\tBL p_check_array_bounds\n\tADD r5, r5, #4\n\tADD r5, r5, r6, LSL #2\n\tSTR r4, [r5]\n\tB L53\nL52:\n\tLDR r4, [sp, #29]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #29]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tBL f_findMoveWithGivenValueRow\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L54\n\tLDR r4, =2\n\tADD r6, sp, #29\n\tLDR r7, =0\n\tLDR r6, [r6]\n\tMOV r0, r7\n\tMOV r1, r6\n\tBL p_check_array_bounds\n\tADD r6, r6, #4\n\tADD r6, r6, r7, LSL #2\n\tSTR r4, [r6]\n\tB L55\nL54:\n\tLDR r4, [sp, #29]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #29]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tBL f_findMoveWithGivenValueRow\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L56\n\tLDR r4, =3\n\tADD r7, sp, #29\n\tLDR r8, =0\n\tLDR r7, [r7]\n\tMOV r0, r8\n\tMOV r1, r7\n\tBL p_check_array_bounds\n\tADD r7, r7, #4\n\tADD r7, r7, r8, LSL #2\n\tSTR r4, [r7]\n\tB L57\nL56:\n\tMOV r4, #0\n\tMOV r0, r4\n\tADD sp, sp, #17\n\tPOP {pc}\nL57:\nL55:\nL53:\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #17\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_findMoveWithGivenValueRow:\n\tPUSH {lr}\n\tSUB sp, sp, #17\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #25]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #-4]!\n\tBL f_hasGivenStateValue\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L58\n\tLDR r4, =1\n\tADD r5, sp, #29\n\tLDR r6, =1\n\tLDR r5, [r5]\n\tMOV r0, r6\n\tMOV r1, r5\n\tBL p_check_array_bounds\n\tADD r5, r5, #4\n\tADD r5, r5, r6, LSL #2\n\tSTR r4, [r5]\n\tB L59\nL58:\n\tLDR r4, [sp, #25]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tBL f_hasGivenStateValue\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L60\n\tLDR r4, =2\n\tADD r6, sp, #29\n\tLDR r7, =1\n\tLDR r6, [r6]\n\tMOV r0, r7\n\tMOV r1, r6\n\tBL p_check_array_bounds\n\tADD r6, r6, #4\n\tADD r6, r6, r7, LSL #2\n\tSTR r4, [r6]\n\tB L61\nL60:\n\tLDR r4, [sp, #25]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_hasGivenStateValue\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L62\n\tLDR r4, =3\n\tADD r7, sp, #29\n\tLDR r8, =1\n\tLDR r7, [r7]\n\tMOV r0, r8\n\tMOV r1, r7\n\tBL p_check_array_bounds\n\tADD r7, r7, #4\n\tADD r7, r7, r8, LSL #2\n\tSTR r4, [r7]\n\tB L63\nL62:\n\tMOV r4, #0\n\tMOV r0, r4\n\tADD sp, sp, #17\n\tPOP {pc}\nL63:\nL61:\nL59:\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #17\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_hasGivenStateValue:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L64\n\tMOV r4, #0\n\tMOV r0, r4\n\tPOP {pc}\n\tB L65\nL64:\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tLDR r5, [sp, #12]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tADD sp, sp, #4\nL65:\n\tPOP {pc}\n\t.ltorg\nf_notifyMoveAI:\n\tPUSH {lr}\n\tSUB sp, sp, #13\n\tLDR r4, [sp, #23]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #9]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #5]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, =msg_32\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, [sp, #31]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #31]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteAllOtherChildren\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tLDR r5, [sp, #23]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5, #4]\n\tSTR r4, [r5]\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteThisStateOnly\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #13\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_deleteAllOtherChildren:\n\tPUSH {lr}\n\tSUB sp, sp, #33\n\tLDR r4, [sp, #37]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #29]\n\tLDR r4, [sp, #29]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #25]\n\tLDR r4, [sp, #29]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #21]\n\tLDR r4, [sp, #37]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #17]\n\tLDR r4, =0\n\tSTR r4, [sp, #13]\n\tLDR r4, =0\n\tSTR r4, [sp, #9]\n\tLDR r4, =0\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #41]\n\tLDR r5, =1\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L66\n\tLDR r4, [sp, #25]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #17]\n\tSTR r4, [sp, #5]\n\tB L67\nL66:\n\tLDR r4, [sp, #25]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #41]\n\tLDR r5, =2\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L68\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #17]\n\tSTR r4, [sp, #5]\n\tB L69\nL68:\n\tLDR r4, [sp, #17]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #5]\nL69:\nL67:\n\tLDR r4, [sp, #45]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #17]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteAllOtherChildrenRow\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteChildrenStateRecursivelyRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteChildrenStateRecursivelyRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #1]\n\tMOV r0, r4\n\tADD sp, sp, #33\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_deleteAllOtherChildrenRow:\n\tPUSH {lr}\n\tSUB sp, sp, #29\n\tLDR r4, [sp, #33]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #25]\n\tLDR r4, [sp, #25]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #21]\n\tLDR r4, [sp, #25]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #17]\n\tLDR r4, [sp, #33]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #13]\n\tLDR r4, =0\n\tSTR r4, [sp, #9]\n\tLDR r4, =0\n\tSTR r4, [sp, #5]\n\tLDR r4, =0\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #37]\n\tLDR r5, =1\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L70\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #17]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #1]\n\tB L71\nL70:\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #37]\n\tLDR r5, =2\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L72\n\tLDR r4, [sp, #17]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #1]\n\tB L73\nL72:\n\tLDR r4, [sp, #13]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #17]\n\tSTR r4, [sp, #1]\nL73:\nL71:\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteStateTreeRecursively\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteStateTreeRecursively\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #9]\n\tMOV r0, r4\n\tADD sp, sp, #29\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_deleteStateTreeRecursively:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L74\n\tMOV r4, #1\n\tMOV r0, r4\n\tPOP {pc}\n\tB L75\nL74:\n\tSUB sp, sp, #13\n\tLDR r4, [sp, #17]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #9]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #9]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteChildrenStateRecursively\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #17]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteThisStateOnly\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #13\n\tPOP {pc}\n\tADD sp, sp, #13\nL75:\n\tPOP {pc}\n\t.ltorg\nf_deleteThisStateOnly:\n\tPUSH {lr}\n\tSUB sp, sp, #13\n\tLDR r4, [sp, #17]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #9]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #9]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_freeBoard\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tBL f_freePointers\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #9]\n\tMOV r0, r4\n\tBL p_free_pair\n\tLDR r4, [sp, #17]\n\tMOV r0, r4\n\tBL p_free_pair\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #13\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_freePointers:\n\tPUSH {lr}\n\tSUB sp, sp, #17\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tBL f_freePointersRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_freePointersRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tBL f_freePointersRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_free_pair\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_free_pair\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #17\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_freePointersRow:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_free_pair\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_free_pair\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_deleteChildrenStateRecursively:\n\tPUSH {lr}\n\tSUB sp, sp, #17\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteChildrenStateRecursivelyRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteChildrenStateRecursivelyRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteChildrenStateRecursivelyRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #17\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_deleteChildrenStateRecursivelyRow:\n\tPUSH {lr}\n\tSUB sp, sp, #17\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteStateTreeRecursively\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteStateTreeRecursively\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tBL f_deleteStateTreeRecursively\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #17\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_askForAMove:\n\tPUSH {lr}\n\tLDRSB r4, [sp, #8]\n\tLDRSB r5, [sp, #9]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L76\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #15]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tBL f_askForAMoveHuman\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tB L77\nL76:\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #15]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #15]\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #18]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #18]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #15]\n\tSTR r4, [sp, #-4]!\n\tBL f_askForAMoveAI\n\tADD sp, sp, #14\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\nL77:\n\tMOV r4, #1\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_placeMove:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #13]\n\tLDR r5, =2\n\tCMP r4, r5\n\tMOVLE r4, #1\n\tMOVGT r4, #0\n\tCMP r4, #0\n\tBEQ L78\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #12]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #17]\n\tLDR r5, =1\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L80\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tB L81\nL80:\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\nL81:\n\tADD sp, sp, #4\n\tB L79\nL78:\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\nL79:\n\tLDR r4, [sp, #17]\n\tLDR r5, =2\n\tCMP r4, r5\n\tMOVLE r4, #1\n\tMOVGT r4, #0\n\tCMP r4, #0\n\tBEQ L82\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #21]\n\tLDR r5, =1\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L84\n\tLDRSB r4, [sp, #16]\n\tLDR r5, [sp]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5]\n\tSTRB r4, [r5]\n\tB L85\nL84:\n\tLDRSB r4, [sp, #16]\n\tLDR r5, [sp]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5, #4]\n\tSTRB r4, [r5]\nL85:\n\tADD sp, sp, #4\n\tB L83\nL82:\n\tLDRSB r4, [sp, #12]\n\tLDR r5, [sp]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5, #4]\n\tSTRB r4, [r5]\nL83:\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_notifyMove:\n\tPUSH {lr}\n\tLDRSB r4, [sp, #8]\n\tLDRSB r5, [sp, #9]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L86\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #19]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #19]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #19]\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #22]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #22]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #19]\n\tSTR r4, [sp, #-4]!\n\tBL f_notifyMoveAI\n\tADD sp, sp, #18\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tB L87\nL86:\n\tSUB sp, sp, #1\n\tLDR r4, [sp, #19]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #19]\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #18]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #18]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #15]\n\tSTR r4, [sp, #-4]!\n\tBL f_notifyMoveHuman\n\tADD sp, sp, #14\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\nL87:\n\tMOV r4, #1\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_oppositeSymbol:\n\tPUSH {lr}\n\tLDRSB r4, [sp, #4]\n\tMOV r5, #'x'\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L88\n\tMOV r4, #'o'\n\tMOV r0, r4\n\tPOP {pc}\n\tB L89\nL88:\n\tLDRSB r4, [sp, #4]\n\tMOV r5, #'o'\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L90\n\tMOV r4, #'x'\n\tMOV r0, r4\n\tPOP {pc}\n\tB L91\nL90:\n\tLDR r4, =msg_33\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =-1\n\tMOV r0, r4\n\tBL exit\nL91:\nL89:\n\tPOP {pc}\n\t.ltorg\nf_symbolAt:\n\tPUSH {lr}\n\tSUB sp, sp, #5\n\tLDR r4, =0\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #13]\n\tLDR r5, =2\n\tCMP r4, r5\n\tMOVLE r4, #1\n\tMOVGT r4, #0\n\tCMP r4, #0\n\tBEQ L92\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #17]\n\tLDR r5, =1\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L94\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tB L95\nL94:\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\nL95:\n\tADD sp, sp, #4\n\tB L93\nL92:\n\tLDR r4, [sp, #9]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\nL93:\n\tMOV r4, #0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #17]\n\tLDR r5, =2\n\tCMP r4, r5\n\tMOVLE r4, #1\n\tMOVGT r4, #0\n\tCMP r4, #0\n\tBEQ L96\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #5]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #21]\n\tLDR r5, =1\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L98\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #4]\n\tB L99\nL98:\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #4]\nL99:\n\tADD sp, sp, #4\n\tB L97\nL96:\n\tLDR r4, [sp, #1]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp]\nL97:\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #5\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_containEmptyCell:\n\tPUSH {lr}\n\tSUB sp, sp, #19\n\tLDR r4, [sp, #23]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #15]\n\tLDR r4, [sp, #15]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #11]\n\tLDR r4, [sp, #15]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #7]\n\tLDR r4, [sp, #23]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #3]\n\tLDR r4, [sp, #11]\n\tSTR r4, [sp, #-4]!\n\tBL f_containEmptyCellRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp, #2]\n\tLDR r4, [sp, #7]\n\tSTR r4, [sp, #-4]!\n\tBL f_containEmptyCellRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp, #1]\n\tLDR r4, [sp, #3]\n\tSTR r4, [sp, #-4]!\n\tBL f_containEmptyCellRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp, #2]\n\tLDRSB r5, [sp, #1]\n\tORR r4, r4, r5\n\tLDRSB r5, [sp]\n\tORR r4, r4, r5\n\tMOV r0, r4\n\tADD sp, sp, #19\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_containEmptyCellRow:\n\tPUSH {lr}\n\tSUB sp, sp, #7\n\tLDR r4, [sp, #11]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #3]\n\tLDR r4, [sp, #3]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #2]\n\tLDR r4, [sp, #3]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #1]\n\tLDR r4, [sp, #11]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp, #2]\n\tMOV r5, #0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tLDRSB r5, [sp, #1]\n\tMOV r6, #0\n\tCMP r5, r6\n\tMOVEQ r5, #1\n\tMOVNE r5, #0\n\tORR r4, r4, r5\n\tLDRSB r5, [sp]\n\tMOV r6, #0\n\tCMP r5, r6\n\tMOVEQ r5, #1\n\tMOVNE r5, #0\n\tORR r4, r4, r5\n\tMOV r0, r4\n\tADD sp, sp, #7\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_hasWon:\n\tPUSH {lr}\n\tSUB sp, sp, #9\n\tLDR r4, =1\n\tSTR r4, [sp, #-4]!\n\tLDR r4, =1\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #-4]!\n\tBL f_symbolAt\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp, #8]\n\tLDR r4, =2\n\tSTR r4, [sp, #-4]!\n\tLDR r4, =1\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #-4]!\n\tBL f_symbolAt\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp, #7]\n\tLDR r4, =3\n\tSTR r4, [sp, #-4]!\n\tLDR r4, =1\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #-4]!\n\tBL f_symbolAt\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp, #6]\n\tLDR r4, =1\n\tSTR r4, [sp, #-4]!\n\tLDR r4, =2\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #-4]!\n\tBL f_symbolAt\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp, #5]\n\tLDR r4, =2\n\tSTR r4, [sp, #-4]!\n\tLDR r4, =2\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #-4]!\n\tBL f_symbolAt\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp, #4]\n\tLDR r4, =3\n\tSTR r4, [sp, #-4]!\n\tLDR r4, =2\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #-4]!\n\tBL f_symbolAt\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp, #3]\n\tLDR r4, =1\n\tSTR r4, [sp, #-4]!\n\tLDR r4, =3\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #-4]!\n\tBL f_symbolAt\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp, #2]\n\tLDR r4, =2\n\tSTR r4, [sp, #-4]!\n\tLDR r4, =3\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #-4]!\n\tBL f_symbolAt\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp, #1]\n\tLDR r4, =3\n\tSTR r4, [sp, #-4]!\n\tLDR r4, =3\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #21]\n\tSTR r4, [sp, #-4]!\n\tBL f_symbolAt\n\tADD sp, sp, #12\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp, #8]\n\tLDRSB r5, [sp, #17]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tLDRSB r5, [sp, #7]\n\tLDRSB r6, [sp, #17]\n\tCMP r5, r6\n\tMOVEQ r5, #1\n\tMOVNE r5, #0\n\tAND r4, r4, r5\n\tLDRSB r5, [sp, #6]\n\tLDRSB r6, [sp, #17]\n\tCMP r5, r6\n\tMOVEQ r5, #1\n\tMOVNE r5, #0\n\tAND r4, r4, r5\n\tLDRSB r5, [sp, #5]\n\tLDRSB r6, [sp, #17]\n\tCMP r5, r6\n\tMOVEQ r5, #1\n\tMOVNE r5, #0\n\tLDRSB r6, [sp, #4]\n\tLDRSB r7, [sp, #17]\n\tCMP r6, r7\n\tMOVEQ r6, #1\n\tMOVNE r6, #0\n\tAND r5, r5, r6\n\tLDRSB r6, [sp, #3]\n\tLDRSB r7, [sp, #17]\n\tCMP r6, r7\n\tMOVEQ r6, #1\n\tMOVNE r6, #0\n\tAND r5, r5, r6\n\tORR r4, r4, r5\n\tLDRSB r5, [sp, #2]\n\tLDRSB r6, [sp, #17]\n\tCMP r5, r6\n\tMOVEQ r5, #1\n\tMOVNE r5, #0\n\tLDRSB r6, [sp, #1]\n\tLDRSB r7, [sp, #17]\n\tCMP r6, r7\n\tMOVEQ r6, #1\n\tMOVNE r6, #0\n\tAND r5, r5, r6\n\tLDRSB r6, [sp]\n\tLDRSB r7, [sp, #17]\n\tCMP r6, r7\n\tMOVEQ r6, #1\n\tMOVNE r6, #0\n\tAND r5, r5, r6\n\tORR r4, r4, r5\n\tLDRSB r5, [sp, #8]\n\tLDRSB r6, [sp, #17]\n\tCMP r5, r6\n\tMOVEQ r5, #1\n\tMOVNE r5, #0\n\tLDRSB r6, [sp, #5]\n\tLDRSB r7, [sp, #17]\n\tCMP r6, r7\n\tMOVEQ r6, #1\n\tMOVNE r6, #0\n\tAND r5, r5, r6\n\tLDRSB r6, [sp, #2]\n\tLDRSB r7, [sp, #17]\n\tCMP r6, r7\n\tMOVEQ r6, #1\n\tMOVNE r6, #0\n\tAND r5, r5, r6\n\tORR r4, r4, r5\n\tLDRSB r5, [sp, #7]\n\tLDRSB r6, [sp, #17]\n\tCMP r5, r6\n\tMOVEQ r5, #1\n\tMOVNE r5, #0\n\tLDRSB r6, [sp, #4]\n\tLDRSB r7, [sp, #17]\n\tCMP r6, r7\n\tMOVEQ r6, #1\n\tMOVNE r6, #0\n\tAND r5, r5, r6\n\tLDRSB r6, [sp, #1]\n\tLDRSB r7, [sp, #17]\n\tCMP r6, r7\n\tMOVEQ r6, #1\n\tMOVNE r6, #0\n\tAND r5, r5, r6\n\tORR r4, r4, r5\n\tLDRSB r5, [sp, #6]\n\tLDRSB r6, [sp, #17]\n\tCMP r5, r6\n\tMOVEQ r5, #1\n\tMOVNE r5, #0\n\tLDRSB r6, [sp, #3]\n\tLDRSB r7, [sp, #17]\n\tCMP r6, r7\n\tMOVEQ r6, #1\n\tMOVNE r6, #0\n\tAND r5, r5, r6\n\tLDRSB r6, [sp]\n\tLDRSB r7, [sp, #17]\n\tCMP r6, r7\n\tMOVEQ r6, #1\n\tMOVNE r6, #0\n\tAND r5, r5, r6\n\tORR r4, r4, r5\n\tLDRSB r5, [sp, #8]\n\tLDRSB r6, [sp, #17]\n\tCMP r5, r6\n\tMOVEQ r5, #1\n\tMOVNE r5, #0\n\tLDRSB r6, [sp, #4]\n\tLDRSB r7, [sp, #17]\n\tCMP r6, r7\n\tMOVEQ r6, #1\n\tMOVNE r6, #0\n\tAND r5, r5, r6\n\tLDRSB r6, [sp]\n\tLDRSB r7, [sp, #17]\n\tCMP r6, r7\n\tMOVEQ r6, #1\n\tMOVNE r6, #0\n\tAND r5, r5, r6\n\tORR r4, r4, r5\n\tLDRSB r5, [sp, #6]\n\tLDRSB r6, [sp, #17]\n\tCMP r5, r6\n\tMOVEQ r5, #1\n\tMOVNE r5, #0\n\tLDRSB r6, [sp, #4]\n\tLDRSB r7, [sp, #17]\n\tCMP r6, r7\n\tMOVEQ r6, #1\n\tMOVNE r6, #0\n\tAND r5, r5, r6\n\tLDRSB r6, [sp, #2]\n\tLDRSB r7, [sp, #17]\n\tCMP r6, r7\n\tMOVEQ r6, #1\n\tMOVNE r6, #0\n\tAND r5, r5, r6\n\tORR r4, r4, r5\n\tMOV r0, r4\n\tADD sp, sp, #9\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_allocateNewBoard:\n\tPUSH {lr}\n\tSUB sp, sp, #20\n\tBL f_allocateNewRow\n\tMOV r4, r0\n\tSTR r4, [sp, #16]\n\tBL f_allocateNewRow\n\tMOV r4, r0\n\tSTR r4, [sp, #12]\n\tBL f_allocateNewRow\n\tMOV r4, r0\n\tSTR r4, [sp, #8]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #16]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, [sp, #12]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #4]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #4]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, [sp, #8]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #20\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_allocateNewRow:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tMOV r5, #0\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4]\n\tMOV r5, #0\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #4]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #4]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tMOV r5, #0\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_freeBoard:\n\tPUSH {lr}\n\tSUB sp, sp, #17\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tBL f_freeRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_freeRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tBL f_freeRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_free_pair\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_free_pair\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #17\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_freeRow:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_free_pair\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_free_pair\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_printAiData:\n\tPUSH {lr}\n\tSUB sp, sp, #9\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tBL f_printStateTreeRecursively\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, =0\n\tMOV r0, r4\n\tBL exit\n\tPOP {pc}\n\t.ltorg\nf_printStateTreeRecursively:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L100\n\tMOV r4, #1\n\tMOV r0, r4\n\tPOP {pc}\n\tB L101\nL100:\n\tSUB sp, sp, #17\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tMOV r4, #'v'\n\tMOV r0, r4\n\tBL putchar\n\tMOV r4, #'='\n\tMOV r0, r4\n\tBL putchar\n\tLDR r4, [sp, #1]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tBL f_printBoard\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_printChildrenStateTree\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tMOV r4, #'p'\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #17\n\tPOP {pc}\n\tADD sp, sp, #17\nL101:\n\tPOP {pc}\n\t.ltorg\nf_printChildrenStateTree:\n\tPUSH {lr}\n\tSUB sp, sp, #17\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tBL f_printChildrenStateTreeRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_printChildrenStateTreeRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tBL f_printChildrenStateTreeRow\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #17\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_printChildrenStateTreeRow:\n\tPUSH {lr}\n\tSUB sp, sp, #17\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #13]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #9]\n\tLDR r4, [sp, #13]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #21]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tBL f_printStateTreeRecursively\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #5]\n\tSTR r4, [sp, #-4]!\n\tBL f_printStateTreeRecursively\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tBL f_printStateTreeRecursively\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #17\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #17\n\tBL f_chooseSymbol\n\tMOV r4, r0\n\tSTRB r4, [sp, #16]\n\tLDRSB r4, [sp, #16]\n\tSTRB r4, [sp, #-1]!\n\tBL f_oppositeSymbol\n\tADD sp, sp, #1\n\tMOV r4, r0\n\tSTRB r4, [sp, #15]\n\tMOV r4, #'x'\n\tSTRB r4, [sp, #14]\n\tBL f_allocateNewBoard\n\tMOV r4, r0\n\tSTR r4, [sp, #10]\n\tLDR r4, =msg_34\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDRSB r4, [sp, #15]\n\tSTRB r4, [sp, #-1]!\n\tBL f_initAI\n\tADD sp, sp, #1\n\tMOV r4, r0\n\tSTR r4, [sp, #6]\n\tLDR r4, =0\n\tSTR r4, [sp, #2]\n\tMOV r4, #0\n\tSTRB r4, [sp, #1]\n\tLDR r4, [sp, #10]\n\tSTR r4, [sp, #-4]!\n\tBL f_printBoard\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tB L102\nL103:\n\tSUB sp, sp, #5\n\tLDR r0, =12\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =0\n\tSTR r5, [r4, #4]\n\tLDR r5, =0\n\tSTR r5, [r4, #8]\n\tLDR r5, =2\n\tSTR r5, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #15]\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #29]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #28]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #25]\n\tSTR r4, [sp, #-4]!\n\tBL f_askForAMove\n\tADD sp, sp, #14\n\tMOV r4, r0\n\tSTRB r4, [sp, #5]\n\tADD r4, sp, #1\n\tLDR r5, =1\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #-4]!\n\tADD r4, sp, #5\n\tLDR r5, =0\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #27]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #24]\n\tSTR r4, [sp, #-4]!\n\tBL f_placeMove\n\tADD sp, sp, #13\n\tMOV r4, r0\n\tSTRB r4, [sp, #5]\n\tADD r4, sp, #1\n\tLDR r5, =1\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #-4]!\n\tADD r4, sp, #5\n\tLDR r5, =0\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #19]\n\tSTR r4, [sp, #-4]!\n\tLDRSB r4, [sp, #33]\n\tSTRB r4, [sp, #-1]!\n\tLDRSB r4, [sp, #32]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #29]\n\tSTR r4, [sp, #-4]!\n\tBL f_notifyMove\n\tADD sp, sp, #18\n\tMOV r4, r0\n\tSTRB r4, [sp, #5]\n\tLDR r4, [sp, #15]\n\tSTR r4, [sp, #-4]!\n\tBL f_printBoard\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp, #5]\n\tLDRSB r4, [sp, #19]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #16]\n\tSTR r4, [sp, #-4]!\n\tBL f_hasWon\n\tADD sp, sp, #5\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tCMP r4, #0\n\tBEQ L104\n\tLDRSB r4, [sp, #19]\n\tSTRB r4, [sp, #6]\n\tB L105\nL104:\nL105:\n\tLDRSB r4, [sp, #19]\n\tSTRB r4, [sp, #-1]!\n\tBL f_oppositeSymbol\n\tADD sp, sp, #1\n\tMOV r4, r0\n\tSTRB r4, [sp, #19]\n\tLDR r4, [sp, #7]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #7]\n\tADD sp, sp, #5\nL102:\n\tLDRSB r4, [sp, #1]\n\tMOV r5, #0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tLDR r5, [sp, #2]\n\tLDR r6, =9\n\tCMP r5, r6\n\tMOVLT r5, #1\n\tMOVGE r5, #0\n\tAND r4, r4, r5\n\tCMP r4, #1\n\tBEQ L103\n\tLDR r4, [sp, #10]\n\tSTR r4, [sp, #-4]!\n\tBL f_freeBoard\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, [sp, #6]\n\tSTR r4, [sp, #-4]!\n\tBL f_destroyAI\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp, #1]\n\tMOV r5, #0\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tCMP r4, #0\n\tBEQ L106\n\tLDRSB r4, [sp, #1]\n\tMOV r0, r4\n\tBL putchar\n\tLDR r4, =msg_35\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L107\nL106:\n\tLDR r4, =msg_36\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL107:\n\tADD sp, sp, #17\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_37\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_38\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_char:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_39\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_40\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_41\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_check_array_bounds:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRLT r0, =msg_42\n\tBLLT p_throw_runtime_error\n\tLDR r1, [r1]\n\tCMP r0, r1\n\tLDRCS r0, =msg_43\n\tBLCS p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_44\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_free_pair:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_45\n\tBEQ p_throw_runtime_error\n\tPUSH {r0}\n\tLDR r0, [r0]\n\tBL free\n\tLDR r0, [sp]\n\tLDR r0, [r0, #4]\n\tBL free\n\tPOP {r0}\n\tBL free\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_46\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/array/array.wacc": ".data\n\nmsg_0:\n\t.word 4\n\t.ascii\t\" = {\"\nmsg_1:\n\t.word 2\n\t.ascii\t\", \"\nmsg_2:\n\t.word 1\n\t.ascii\t\"}\"\nmsg_3:\n\t.word 44\n\t.ascii\t\"ArrayIndexOutOfBoundsError: negative index\\n\\0\"\nmsg_4:\n\t.word 45\n\t.ascii\t\"ArrayIndexOutOfBoundsError: index too large\\n\\0\"\nmsg_5:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_6:\n\t.word 3\n\t.ascii\t\"%p\\0\"\nmsg_7:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_8:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_9:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r0, =44\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =0\n\tSTR r5, [r4, #4]\n\tLDR r5, =0\n\tSTR r5, [r4, #8]\n\tLDR r5, =0\n\tSTR r5, [r4, #12]\n\tLDR r5, =0\n\tSTR r5, [r4, #16]\n\tLDR r5, =0\n\tSTR r5, [r4, #20]\n\tLDR r5, =0\n\tSTR r5, [r4, #24]\n\tLDR r5, =0\n\tSTR r5, [r4, #28]\n\tLDR r5, =0\n\tSTR r5, [r4, #32]\n\tLDR r5, =0\n\tSTR r5, [r4, #36]\n\tLDR r5, =0\n\tSTR r5, [r4, #40]\n\tLDR r5, =10\n\tSTR r5, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L0\nL1:\n\tLDR r4, [sp]\n\tADD r5, sp, #4\n\tLDR r6, [sp]\n\tLDR r5, [r5]\n\tMOV r0, r6\n\tMOV r1, r5\n\tBL p_check_array_bounds\n\tADD r5, r5, #4\n\tADD r5, r5, r6, LSL #2\n\tSTR r4, [r5]\n\tLDR r4, [sp]\n\tLDR r6, =1\n\tADDS r4, r4, r6\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\nL0:\n\tLDR r4, [sp]\n\tLDR r6, =10\n\tCMP r4, r6\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_reference\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L2\nL3:\n\tADD r4, sp, #4\n\tLDR r6, [sp]\n\tLDR r4, [r4]\n\tMOV r0, r6\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r6, LSL #2\n\tLDR r4, [r4]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, [sp]\n\tLDR r6, =9\n\tCMP r4, r6\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #0\n\tBEQ L4\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tB L5\nL4:\nL5:\n\tLDR r4, [sp]\n\tLDR r6, =1\n\tADDS r4, r4, r6\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\nL2:\n\tLDR r4, [sp]\n\tLDR r6, =10\n\tCMP r4, r6\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #1\n\tBEQ L3\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_array_bounds:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRLT r0, =msg_3\n\tBLLT p_throw_runtime_error\n\tLDR r1, [r1]\n\tCMP r0, r1\n\tLDRCS r0, =msg_4\n\tBLCS p_throw_runtime_error\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_5\n\tBL p_throw_runtime_error\np_print_reference:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_7\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_8\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_9\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/array/arrayBasic.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =0\n\tSTR r5, [r4, #4]\n\tLDR r5, =1\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/array/arrayEmpty.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r0, =4\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =0\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/array/arrayLength.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r0, =20\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =43\n\tSTR r5, [r4, #4]\n\tLDR r5, =2\n\tSTR r5, [r4, #8]\n\tLDR r5, =18\n\tSTR r5, [r4, #12]\n\tLDR r5, =1\n\tSTR r5, [r4, #16]\n\tLDR r5, =4\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tLDR r4, [r4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/array/arrayLookup.wacc": ".data\n\nmsg_0:\n\t.word 44\n\t.ascii\t\"ArrayIndexOutOfBoundsError: negative index\\n\\0\"\nmsg_1:\n\t.word 45\n\t.ascii\t\"ArrayIndexOutOfBoundsError: index too large\\n\\0\"\nmsg_2:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_4:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r0, =20\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =43\n\tSTR r5, [r4, #4]\n\tLDR r5, =2\n\tSTR r5, [r4, #8]\n\tLDR r5, =18\n\tSTR r5, [r4, #12]\n\tLDR r5, =1\n\tSTR r5, [r4, #16]\n\tLDR r5, =4\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tADD r4, sp, #0\n\tLDR r5, =0\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_array_bounds:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRLT r0, =msg_0\n\tBLLT p_throw_runtime_error\n\tLDR r1, [r1]\n\tCMP r0, r1\n\tLDRCS r0, =msg_1\n\tBLCS p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/array/arrayNested.wacc": ".data\n\nmsg_0:\n\t.word 44\n\t.ascii\t\"ArrayIndexOutOfBoundsError: negative index\\n\\0\"\nmsg_1:\n\t.word 45\n\t.ascii\t\"ArrayIndexOutOfBoundsError: index too large\\n\\0\"\nmsg_2:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_4:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #12\n\tLDR r0, =16\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =1\n\tSTR r5, [r4, #4]\n\tLDR r5, =2\n\tSTR r5, [r4, #8]\n\tLDR r5, =3\n\tSTR r5, [r4, #12]\n\tLDR r5, =3\n\tSTR r5, [r4]\n\tSTR r4, [sp, #8]\n\tLDR r0, =12\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =3\n\tSTR r5, [r4, #4]\n\tLDR r5, =4\n\tSTR r5, [r4, #8]\n\tLDR r5, =2\n\tSTR r5, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r0, =12\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #8]\n\tSTR r5, [r4, #4]\n\tLDR r5, [sp, #4]\n\tSTR r5, [r4, #8]\n\tLDR r5, =2\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tADD r4, sp, #0\n\tLDR r5, =0\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r5, =2\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD r4, sp, #0\n\tLDR r5, =1\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r5, =0\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #12\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_array_bounds:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRLT r0, =msg_0\n\tBLLT p_throw_runtime_error\n\tLDR r1, [r1]\n\tCMP r0, r1\n\tLDRCS r0, =msg_1\n\tBLCS p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/array/arrayPrint.wacc": ".data\n\nmsg_0:\n\t.word 4\n\t.ascii\t\" = {\"\nmsg_1:\n\t.word 2\n\t.ascii\t\", \"\nmsg_2:\n\t.word 1\n\t.ascii\t\"}\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%p\\0\"\nmsg_4:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_5:\n\t.word 44\n\t.ascii\t\"ArrayIndexOutOfBoundsError: negative index\\n\\0\"\nmsg_6:\n\t.word 45\n\t.ascii\t\"ArrayIndexOutOfBoundsError: index too large\\n\\0\"\nmsg_7:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_8:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_9:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r0, =44\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =0\n\tSTR r5, [r4, #4]\n\tLDR r5, =1\n\tSTR r5, [r4, #8]\n\tLDR r5, =2\n\tSTR r5, [r4, #12]\n\tLDR r5, =3\n\tSTR r5, [r4, #16]\n\tLDR r5, =4\n\tSTR r5, [r4, #20]\n\tLDR r5, =5\n\tSTR r5, [r4, #24]\n\tLDR r5, =6\n\tSTR r5, [r4, #28]\n\tLDR r5, =7\n\tSTR r5, [r4, #32]\n\tLDR r5, =8\n\tSTR r5, [r4, #36]\n\tLDR r5, =9\n\tSTR r5, [r4, #40]\n\tLDR r5, =10\n\tSTR r5, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_reference\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L0\nL1:\n\tADD r4, sp, #4\n\tLDR r5, [sp]\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, [sp]\n\tLDR r5, =9\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #0\n\tBEQ L2\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tB L3\nL2:\nL3:\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\nL0:\n\tLDR r4, [sp]\n\tLDR r5, =10\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_reference:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_check_array_bounds:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRLT r0, =msg_5\n\tBLLT p_throw_runtime_error\n\tLDR r1, [r1]\n\tCMP r0, r1\n\tLDRCS r0, =msg_6\n\tBLCS p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_7\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_8\n\tBL p_throw_runtime_error\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_9\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/array/arraySimple.wacc": ".data\n\nmsg_0:\n\t.word 44\n\t.ascii\t\"ArrayIndexOutOfBoundsError: negative index\\n\\0\"\nmsg_1:\n\t.word 45\n\t.ascii\t\"ArrayIndexOutOfBoundsError: index too large\\n\\0\"\nmsg_2:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_4:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =0\n\tSTR r5, [r4, #4]\n\tLDR r5, =1\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tLDR r4, =42\n\tADD r5, sp, #0\n\tLDR r6, =0\n\tLDR r5, [r5]\n\tMOV r0, r6\n\tMOV r1, r5\n\tBL p_check_array_bounds\n\tADD r5, r5, #4\n\tADD r5, r5, r6, LSL #2\n\tSTR r4, [r5]\n\tADD r4, sp, #0\n\tLDR r6, =0\n\tLDR r4, [r4]\n\tMOV r0, r6\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r6, LSL #2\n\tLDR r4, [r4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_array_bounds:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRLT r0, =msg_0\n\tBLLT p_throw_runtime_error\n\tLDR r1, [r1]\n\tCMP r0, r1\n\tLDRCS r0, =msg_1\n\tBLCS p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/array/modifyString.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_2:\n\t.word 44\n\t.ascii\t\"ArrayIndexOutOfBoundsError: negative index\\n\\0\"\nmsg_3:\n\t.word 45\n\t.ascii\t\"ArrayIndexOutOfBoundsError: index too large\\n\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r0, =16\n\tBL malloc\n\tMOV r4, r0\n\tMOV r5, #'h'\n\tSTRB r5, [r4, #4]\n\tMOV r5, #'e'\n\tSTRB r5, [r4, #5]\n\tMOV r5, #'l'\n\tSTRB r5, [r4, #6]\n\tMOV r5, #'l'\n\tSTRB r5, [r4, #7]\n\tMOV r5, #'o'\n\tSTRB r5, [r4, #8]\n\tMOV r5, #' '\n\tSTRB r5, [r4, #9]\n\tMOV r5, #'w'\n\tSTRB r5, [r4, #10]\n\tMOV r5, #'o'\n\tSTRB r5, [r4, #11]\n\tMOV r5, #'r'\n\tSTRB r5, [r4, #12]\n\tMOV r5, #'l'\n\tSTRB r5, [r4, #13]\n\tMOV r5, #'d'\n\tSTRB r5, [r4, #14]\n\tMOV r5, #'!'\n\tSTRB r5, [r4, #15]\n\tLDR r5, =12\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tMOV r4, #'H'\n\tADD r5, sp, #0\n\tLDR r6, =0\n\tLDR r5, [r5]\n\tMOV r0, r6\n\tMOV r1, r5\n\tBL p_check_array_bounds\n\tADD r5, r5, #4\n\tADD r5, r5, r6\n\tSTRB r4, [r5]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r0, =7\n\tBL malloc\n\tMOV r4, r0\n\tMOV r6, #'H'\n\tSTRB r6, [r4, #4]\n\tMOV r6, #'i'\n\tSTRB r6, [r4, #5]\n\tMOV r6, #'!'\n\tSTRB r6, [r4, #6]\n\tLDR r6, =3\n\tSTR r6, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_check_array_bounds:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRLT r0, =msg_2\n\tBLLT p_throw_runtime_error\n\tLDR r1, [r1]\n\tCMP r0, r1\n\tLDRCS r0, =msg_3\n\tBLCS p_throw_runtime_error\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/array/printRef.wacc": ".data\n\nmsg_0:\n\t.word 53\n\t.ascii\t\"Printing an array variable gives an address, such as \"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 3\n\t.ascii\t\"%p\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r0, =16\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =1\n\tSTR r5, [r4, #4]\n\tLDR r5, =2\n\tSTR r5, [r4, #8]\n\tLDR r5, =3\n\tSTR r5, [r4, #12]\n\tLDR r5, =3\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_reference\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_reference:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/basic/exit/exit-1.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =-1\n\tMOV r0, r4\n\tBL exit\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/basic/exit/exitBasic.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =7\n\tMOV r0, r4\n\tBL exit\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/basic/exit/exitBasic2.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =42\n\tMOV r0, r4\n\tBL exit\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/basic/exit/exitBigNum.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =4096\n\tMOV r0, r4\n\tBL exit\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/basic/exit/exitWrap.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =256\n\tMOV r0, r4\n\tBL exit\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/basic/skip/comment.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/basic/skip/commentInLine.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/basic/skip/skip.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/expressions/andExpr.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #2\n\tMOV r4, #1\n\tSTRB r4, [sp, #1]\n\tMOV r4, #0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp, #1]\n\tLDRSB r5, [sp]\n\tAND r4, r4, r5\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDRSB r4, [sp, #1]\n\tMOV r5, #1\n\tAND r4, r4, r5\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDRSB r4, [sp]\n\tMOV r5, #0\n\tAND r4, r4, r5\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #2\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/boolCalc.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #3\n\tMOV r4, #1\n\tSTRB r4, [sp, #2]\n\tMOV r4, #0\n\tSTRB r4, [sp, #1]\n\tLDRSB r4, [sp, #2]\n\tLDRSB r5, [sp, #1]\n\tAND r4, r4, r5\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #3\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/boolExpr1.wacc": ".data\n\nmsg_0:\n\t.word 7\n\t.ascii\t\"Correct\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"Wrong\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tMOV r4, #1\n\tMOV r5, #0\n\tAND r4, r4, r5\n\tMOV r5, #1\n\tMOV r6, #0\n\tAND r5, r5, r6\n\tORR r4, r4, r5\n\tEOR r4, r4, #1\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r5, #1\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L1\nL0:\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL1:\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/charComparisonExpr.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #2\n\tMOV r4, #'a'\n\tSTRB r4, [sp, #1]\n\tMOV r4, #'z'\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp, #1]\n\tLDRSB r5, [sp]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDRSB r4, [sp, #1]\n\tLDRSB r5, [sp]\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDRSB r4, [sp, #1]\n\tLDRSB r5, [sp]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDRSB r4, [sp, #1]\n\tLDRSB r5, [sp]\n\tCMP r4, r5\n\tMOVLE r4, #1\n\tMOVGT r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDRSB r4, [sp, #1]\n\tLDRSB r5, [sp]\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDRSB r4, [sp, #1]\n\tLDRSB r5, [sp]\n\tCMP r4, r5\n\tMOVGE r4, #1\n\tMOVLT r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #2\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/divExpr.wacc": ".data\n\nmsg_0:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =5\n\tSTR r4, [sp, #4]\n\tLDR r4, =3\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r4, r0\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/equalsExpr.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #13\n\tLDR r4, =2\n\tSTR r4, [sp, #9]\n\tLDR r4, =4\n\tSTR r4, [sp, #5]\n\tLDR r4, =4\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #9]\n\tLDR r5, [sp, #5]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, [sp, #9]\n\tLDR r5, [sp, #5]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, [sp, #5]\n\tLDR r5, [sp, #1]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #13\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/greaterEqExpr.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #16\n\tLDR r4, =2\n\tSTR r4, [sp, #12]\n\tLDR r4, =6\n\tSTR r4, [sp, #8]\n\tLDR r4, =4\n\tSTR r4, [sp, #4]\n\tLDR r4, =4\n\tSTR r4, [sp]\n\tLDR r4, [sp, #12]\n\tLDR r5, [sp, #8]\n\tCMP r4, r5\n\tMOVGE r4, #1\n\tMOVLT r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp, #4]\n\tCMP r4, r5\n\tMOVGE r4, #1\n\tMOVLT r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp, #4]\n\tCMP r4, r5\n\tMOVGE r4, #1\n\tMOVLT r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #16\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/greaterExpr.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #12\n\tLDR r4, =2\n\tSTR r4, [sp, #8]\n\tLDR r4, =6\n\tSTR r4, [sp, #4]\n\tLDR r4, =4\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp, #4]\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #12\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/intCalc.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #12\n\tLDR r4, =42\n\tSTR r4, [sp, #8]\n\tLDR r4, =30\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp, #4]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #12\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/intExpr1.wacc": ".data\n\nmsg_0:\n\t.word 7\n\t.ascii\t\"Correct\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"Wrong\"\nmsg_2:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_4:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =10\n\tLDR r5, =1\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tLDR r5, =2\n\tLDR r6, =15\n\tSMULL r5, r6, r5, r6\n\tCMP r6, r5, ASR #31\n\tBLNE p_throw_overflow_error\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tLDR r5, =40\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L1\nL0:\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL1:\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_2\n\tBL p_throw_runtime_error\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/expressions/lessCharExpr.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #3\n\tMOV r4, #'a'\n\tSTRB r4, [sp, #2]\n\tMOV r4, #'e'\n\tSTRB r4, [sp, #1]\n\tMOV r4, #'c'\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp, #2]\n\tLDRSB r5, [sp, #1]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDRSB r4, [sp, #1]\n\tLDRSB r5, [sp]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #3\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/lessEqExpr.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #16\n\tLDR r4, =2\n\tSTR r4, [sp, #12]\n\tLDR r4, =6\n\tSTR r4, [sp, #8]\n\tLDR r4, =4\n\tSTR r4, [sp, #4]\n\tLDR r4, =4\n\tSTR r4, [sp]\n\tLDR r4, [sp, #12]\n\tLDR r5, [sp, #8]\n\tCMP r4, r5\n\tMOVLE r4, #1\n\tMOVGT r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp, #4]\n\tCMP r4, r5\n\tMOVLE r4, #1\n\tMOVGT r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tCMP r4, r5\n\tMOVLE r4, #1\n\tMOVGT r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #16\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/lessExpr.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #12\n\tLDR r4, =2\n\tSTR r4, [sp, #8]\n\tLDR r4, =6\n\tSTR r4, [sp, #4]\n\tLDR r4, =4\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp, #4]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #12\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/longExpr.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =1\n\tLDR r5, =2\n\tLDR r6, =3\n\tLDR r7, =4\n\tLDR r8, =5\n\tLDR r9, =6\n\tLDR r10, =7\n\tPUSH {r10}\n\tLDR r10, =8\n\tPUSH {r10}\n\tLDR r10, =9\n\tPUSH {r10}\n\tLDR r10, =10\n\tPUSH {r10}\n\tLDR r10, =11\n\tPUSH {r10}\n\tLDR r10, =12\n\tPUSH {r10}\n\tLDR r10, =13\n\tPUSH {r10}\n\tLDR r10, =14\n\tPUSH {r10}\n\tLDR r10, =15\n\tPUSH {r10}\n\tLDR r10, =16\n\tPUSH {r10}\n\tLDR r10, =17\n\tPOP {r11}\n\tADDS r10, r11, r10\n\tBLVS p_throw_overflow_error\n\tPOP {r11}\n\tADDS r10, r11, r10\n\tBLVS p_throw_overflow_error\n\tPOP {r11}\n\tADDS r10, r11, r10\n\tBLVS p_throw_overflow_error\n\tPOP {r11}\n\tADDS r10, r11, r10\n\tBLVS p_throw_overflow_error\n\tPOP {r11}\n\tADDS r10, r11, r10\n\tBLVS p_throw_overflow_error\n\tPOP {r11}\n\tADDS r10, r11, r10\n\tBLVS p_throw_overflow_error\n\tPOP {r11}\n\tADDS r10, r11, r10\n\tBLVS p_throw_overflow_error\n\tPOP {r11}\n\tADDS r10, r11, r10\n\tBLVS p_throw_overflow_error\n\tPOP {r11}\n\tADDS r10, r11, r10\n\tBLVS p_throw_overflow_error\n\tPOP {r11}\n\tADDS r10, r11, r10\n\tBLVS p_throw_overflow_error\n\tADDS r9, r9, r10\n\tBLVS p_throw_overflow_error\n\tADDS r8, r8, r9\n\tBLVS p_throw_overflow_error\n\tADDS r7, r7, r8\n\tBLVS p_throw_overflow_error\n\tADDS r6, r6, r7\n\tBLVS p_throw_overflow_error\n\tADDS r5, r5, r6\n\tBLVS p_throw_overflow_error\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL exit\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/longExpr2.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =2\n\tLDR r5, =3\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =2\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =1\n\tLDR r6, =2\n\tADDS r5, r5, r6\n\tBLVS p_throw_overflow_error\n\tLDR r6, =3\n\tLDR r7, =4\n\tLDR r8, =6\n\tMOV r0, r7\n\tMOV r1, r8\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r7, r0\n\tSUBS r6, r6, r7\n\tBLVS p_throw_overflow_error\n\tSMULL r5, r6, r5, r6\n\tCMP r6, r5, ASR #31\n\tBLNE p_throw_overflow_error\n\tLDR r6, =2\n\tLDR r7, =18\n\tLDR r8, =17\n\tSUBS r7, r7, r8\n\tBLVS p_throw_overflow_error\n\tSMULL r6, r7, r6, r7\n\tCMP r7, r6, ASR #31\n\tBLNE p_throw_overflow_error\n\tLDR r7, =3\n\tLDR r8, =4\n\tSMULL r7, r8, r7, r8\n\tCMP r8, r7, ASR #31\n\tBLNE p_throw_overflow_error\n\tLDR r8, =4\n\tMOV r0, r7\n\tMOV r1, r8\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r7, r0\n\tLDR r8, =6\n\tADDS r7, r7, r8\n\tBLVS p_throw_overflow_error\n\tADDS r6, r6, r7\n\tBLVS p_throw_overflow_error\n\tMOV r0, r5\n\tMOV r1, r6\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r5, r0\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL exit\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_1\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/longExpr3.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =1\n\tLDR r5, =2\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =3\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =4\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =5\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =6\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =7\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =8\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =9\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =10\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =11\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =12\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =13\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =14\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =15\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =16\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =17\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL exit\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/longSplitExpr.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #36\n\tLDR r4, =1\n\tLDR r5, =2\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #32]\n\tLDR r4, =3\n\tLDR r5, =4\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #28]\n\tLDR r4, =5\n\tLDR r5, =6\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #24]\n\tLDR r4, =7\n\tLDR r5, =8\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #20]\n\tLDR r4, =9\n\tLDR r5, =10\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #16]\n\tLDR r4, =11\n\tLDR r5, =12\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #12]\n\tLDR r4, =13\n\tLDR r5, =14\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #8]\n\tLDR r4, =15\n\tLDR r5, =16\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #4]\n\tLDR r4, =17\n\tSTR r4, [sp]\n\tLDR r4, [sp, #32]\n\tLDR r5, [sp, #28]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, [sp, #24]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, [sp, #20]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, [sp, #16]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, [sp, #12]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, [sp, #8]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, [sp, #4]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, [sp]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tBL exit\n\tADD sp, sp, #36\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/longSplitExpr2.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_2:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_4:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #16\n\tLDR r4, =1\n\tLDR r5, =2\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =3\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =4\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =5\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =6\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =7\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =8\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =9\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =10\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =11\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =12\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =13\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =14\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =15\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =16\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =17\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #12]\n\tLDR r4, =-1\n\tLDR r5, =2\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =3\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =4\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =5\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =6\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =7\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =8\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =9\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =10\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =11\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =12\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =13\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =14\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =15\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =16\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =17\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #8]\n\tLDR r4, =1\n\tLDR r5, =2\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tLDR r5, =3\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tLDR r5, =4\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tLDR r5, =5\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tLDR r5, =6\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tLDR r5, =7\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tLDR r5, =8\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tLDR r5, =9\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tLDR r5, =10\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tSTR r4, [sp, #4]\n\tLDR r4, =10\n\tSTR r4, [sp]\n\tLDR r4, [sp, #12]\n\tLDR r5, [sp, #8]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, [sp, #4]\n\tLDR r6, [sp]\n\tMOV r0, r5\n\tMOV r1, r6\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r5, r0\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp, #12]\n\tLDR r5, [sp, #8]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, [sp, #4]\n\tLDR r6, [sp]\n\tMOV r0, r5\n\tMOV r1, r6\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r5, r0\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, =256\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idivmod\n\tMOV r4, r1\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp, #12]\n\tLDR r5, [sp, #8]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, [sp, #4]\n\tLDR r6, [sp]\n\tMOV r0, r5\n\tMOV r1, r6\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r5, r0\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tBL exit\n\tADD sp, sp, #16\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_1\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/minusExpr.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =15\n\tSTR r4, [sp, #4]\n\tLDR r4, =20\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tLDR r5, [sp, #4]\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/minusMinusExpr.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =1\n\tLDR r5, =-2\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/minusNoWhitespaceExpr.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =1\n\tLDR r5, =2\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/minusPlusExpr.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =1\n\tLDR r5, =2\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/modExpr.wacc": ".data\n\nmsg_0:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =5\n\tSTR r4, [sp, #4]\n\tLDR r4, =3\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idivmod\n\tMOV r4, r1\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/multExpr.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =5\n\tSTR r4, [sp, #4]\n\tLDR r4, =3\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/multNoWhitespaceExpr.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =1\n\tLDR r5, =2\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/negBothDiv.wacc": ".data\n\nmsg_0:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =-4\n\tSTR r4, [sp, #4]\n\tLDR r4, =-2\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r4, r0\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/negBothMod.wacc": ".data\n\nmsg_0:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =-5\n\tSTR r4, [sp, #4]\n\tLDR r4, =-3\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idivmod\n\tMOV r4, r1\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/negDividendDiv.wacc": ".data\n\nmsg_0:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =-4\n\tSTR r4, [sp, #4]\n\tLDR r4, =2\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r4, r0\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/negDividendMod.wacc": ".data\n\nmsg_0:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =-5\n\tSTR r4, [sp, #4]\n\tLDR r4, =3\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idivmod\n\tMOV r4, r1\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/negDivisorDiv.wacc": ".data\n\nmsg_0:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =4\n\tSTR r4, [sp, #4]\n\tLDR r4, =-2\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r4, r0\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/negDivisorMod.wacc": ".data\n\nmsg_0:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =5\n\tSTR r4, [sp, #4]\n\tLDR r4, =-3\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idivmod\n\tMOV r4, r1\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/negExpr.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =42\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tRSBS r4, r4, #0\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/notequalsExpr.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #13\n\tLDR r4, =2\n\tSTR r4, [sp, #9]\n\tLDR r4, =4\n\tSTR r4, [sp, #5]\n\tLDR r4, =4\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #9]\n\tLDR r5, [sp, #5]\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, [sp, #9]\n\tLDR r5, [sp, #5]\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, [sp, #5]\n\tLDR r5, [sp, #1]\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #13\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/notExpr.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #2\n\tMOV r4, #1\n\tSTRB r4, [sp, #1]\n\tMOV r4, #0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp, #1]\n\tEOR r4, r4, #1\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDRSB r4, [sp]\n\tEOR r4, r4, #1\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #2\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/ordAndchrExpr.wacc": ".data\n\nmsg_0:\n\t.word 4\n\t.ascii\t\" is \"\nmsg_1:\n\t.word 4\n\t.ascii\t\" is \"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_4:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #5\n\tMOV r4, #'a'\n\tSTRB r4, [sp, #4]\n\tLDR r4, =99\n\tSTR r4, [sp]\n\tLDRSB r4, [sp, #4]\n\tMOV r0, r4\n\tBL putchar\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDRSB r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tADD sp, sp, #5\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/orExpr.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #2\n\tMOV r4, #1\n\tSTRB r4, [sp, #1]\n\tMOV r4, #0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp, #1]\n\tLDRSB r5, [sp]\n\tORR r4, r4, r5\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDRSB r4, [sp, #1]\n\tMOV r5, #1\n\tORR r4, r4, r5\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDRSB r4, [sp]\n\tMOV r5, #0\n\tORR r4, r4, r5\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #2\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/plusExpr.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =15\n\tSTR r4, [sp, #4]\n\tLDR r4, =20\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/plusMinusExpr.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =1\n\tLDR r5, =-2\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/plusNoWhitespaceExpr.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =1\n\tLDR r5, =2\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/plusPlusExpr.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =1\n\tLDR r5, =2\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/expressions/sequentialCount.wacc": ".data\n\nmsg_0:\n\t.word 20\n\t.ascii\t\"Can you count to 10?\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_4:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =1\n\tSTR r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_4\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/expressions/stringEqualsExpr.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"Hello\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"foo\"\nmsg_2:\n\t.word 3\n\t.ascii\t\"foo\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_4:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_5:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #13\n\tLDR r4, =msg_0\n\tSTR r4, [sp, #9]\n\tLDR r4, =msg_1\n\tSTR r4, [sp, #5]\n\tLDR r4, =msg_2\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #9]\n\tLDR r5, [sp, #9]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, [sp, #9]\n\tLDR r5, [sp, #5]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, [sp, #5]\n\tLDR r5, [sp, #1]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #13\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_3\n\tLDREQ r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/function/nested_functions/fibonacciFullRec.wacc": ".data\n\nmsg_0:\n\t.word 61\n\t.ascii\t\"This program calculates the nth fibonacci number recursively.\"\nmsg_1:\n\t.word 42\n\t.ascii\t\"Please enter n (should not be too large): \"\nmsg_2:\n\t.word 15\n\t.ascii\t\"The input n is \"\nmsg_3:\n\t.word 28\n\t.ascii\t\"The nth fibonacci number is \"\nmsg_4:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_5:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_6:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_7:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_8:\n\t.word 3\n\t.ascii\t\"%d\\0\"\n\n.text\n\n.global main\nf_fibonacci:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, [sp, #12]\n\tLDR r5, =1\n\tCMP r4, r5\n\tMOVLE r4, #1\n\tMOVGT r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, [sp, #12]\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tB L1\nL0:\nL1:\n\tLDR r4, [sp, #12]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #-4]!\n\tBL f_fibonacci\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #12]\n\tLDR r5, =2\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #-4]!\n\tBL f_fibonacci\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, =0\n\tSTR r4, [sp, #4]\n\tADD r4, sp, #4\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_fibonacci\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_4\n\tBL p_throw_runtime_error\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_7\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_8\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/function/nested_functions/fibonacciRecursive.wacc": ".data\n\nmsg_0:\n\t.word 2\n\t.ascii\t\", \"\nmsg_1:\n\t.word 35\n\t.ascii\t\"The first 20 fibonacci numbers are:\"\nmsg_2:\n\t.word 3\n\t.ascii\t\"0, \"\nmsg_3:\n\t.word 3\n\t.ascii\t\"...\"\nmsg_4:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_5:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_6:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_7:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nf_fibonacci:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, [sp, #12]\n\tLDR r5, =1\n\tCMP r4, r5\n\tMOVLE r4, #1\n\tMOVGT r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, [sp, #12]\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tB L1\nL0:\nL1:\n\tLDRSB r4, [sp, #16]\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #13]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #-4]!\n\tBL f_fibonacci\n\tADD sp, sp, #5\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDRSB r4, [sp, #16]\n\tCMP r4, #0\n\tBEQ L2\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tB L3\nL2:\nL3:\n\tMOV r4, #0\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, [sp, #13]\n\tLDR r5, =2\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #-4]!\n\tBL f_fibonacci\n\tADD sp, sp, #5\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tMOV r4, #1\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, =19\n\tSTR r4, [sp, #-4]!\n\tBL f_fibonacci\n\tADD sp, sp, #5\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_4\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_7\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/function/nested_functions/fixedPointRealArithmetic.wacc": ".data\n\nmsg_0:\n\t.word 24\n\t.ascii\t\"Using fixed-point real: \"\nmsg_1:\n\t.word 3\n\t.ascii\t\" / \"\nmsg_2:\n\t.word 3\n\t.ascii\t\" * \"\nmsg_3:\n\t.word 3\n\t.ascii\t\" = \"\nmsg_4:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_5:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_6:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_7:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_8:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nf_q:\n\tPUSH {lr}\n\tLDR r4, =14\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_power:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =1\n\tSTR r4, [sp]\n\tB L0\nL1:\n\tLDR r4, [sp]\n\tLDR r5, [sp, #8]\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp, #12]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #12]\nL0:\n\tLDR r4, [sp, #12]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_f:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tBL f_q\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, =2\n\tSTR r4, [sp, #-4]!\n\tBL f_power\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #8\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_intToFixedPoint:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tBL f_f\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp]\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_fixedPointToIntRoundDown:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tBL f_f\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r4, r0\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_fixedPointToIntRoundNear:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tBL f_f\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVGE r4, #1\n\tMOVLT r4, #0\n\tCMP r4, #0\n\tBEQ L2\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp]\n\tLDR r6, =2\n\tMOV r0, r5\n\tMOV r1, r6\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r5, r0\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r4, r0\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tB L3\nL2:\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp]\n\tLDR r6, =2\n\tMOV r0, r5\n\tMOV r1, r6\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r5, r0\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r4, r0\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\nL3:\n\tPOP {pc}\n\t.ltorg\nf_add:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp, #8]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_subtract:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp, #8]\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_addByInt:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tBL f_f\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp, #12]\n\tLDR r6, [sp]\n\tSMULL r5, r6, r5, r6\n\tCMP r6, r5, ASR #31\n\tBLNE p_throw_overflow_error\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_subtractByInt:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tBL f_f\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp, #12]\n\tLDR r6, [sp]\n\tSMULL r5, r6, r5, r6\n\tCMP r6, r5, ASR #31\n\tBLNE p_throw_overflow_error\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_multiply:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tBL f_f\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp, #12]\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r4, r0\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_multiplyByInt:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp, #8]\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_divide:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tBL f_f\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tLDR r5, [sp]\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tLDR r5, [sp, #12]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r4, r0\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_divideByInt:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp, #8]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r4, r0\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #16\n\tLDR r4, =10\n\tSTR r4, [sp, #12]\n\tLDR r4, =3\n\tSTR r4, [sp, #8]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #12]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #12]\n\tSTR r4, [sp, #-4]!\n\tBL f_intToFixedPoint\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #8]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #8]\n\tSTR r4, [sp, #-4]!\n\tBL f_divideByInt\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #8]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #8]\n\tSTR r4, [sp, #-4]!\n\tBL f_multiplyByInt\n\tADD sp, sp, #8\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_fixedPointToIntRoundNear\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #16\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_4\n\tBL p_throw_runtime_error\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_5\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_7\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_8\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/function/nested_functions/functionConditionalReturn.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nf_f:\n\tPUSH {lr}\n\tMOV r4, #1\n\tCMP r4, #0\n\tBEQ L0\n\tMOV r4, #1\n\tMOV r0, r4\n\tPOP {pc}\n\tB L1\nL0:\n\tMOV r4, #0\n\tMOV r0, r4\n\tPOP {pc}\nL1:\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tBL f_f\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/function/nested_functions/mutualRecursion.wacc": ".data\n\nmsg_0:\n\t.word 12\n\t.ascii\t\"r1: sending \"\nmsg_1:\n\t.word 13\n\t.ascii\t\"r2: received \"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_4:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_5:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\n\n.text\n\n.global main\nf_r1:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tB L1\nL0:\n\tSUB sp, sp, #4\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp, #8]\n\tSTR r4, [sp, #-4]!\n\tBL f_r2\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tADD sp, sp, #4\nL1:\n\tLDR r4, =42\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_r2:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp, #8]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #-4]!\n\tBL f_r1\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, =44\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, =8\n\tSTR r4, [sp, #-4]!\n\tBL f_r1\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_5\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/function/nested_functions/printInputTriangle.wacc": ".data\n\nmsg_0:\n\t.word 1\n\t.ascii\t\"-\"\nmsg_1:\n\t.word 0\n\t.ascii\t\"\"\nmsg_2:\n\t.word 48\n\t.ascii\t\"Please enter the size of the triangle to print: \"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_4:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_5:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_6:\n\t.word 3\n\t.ascii\t\"%d\\0\"\n\n.text\n\n.global main\nf_f:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tB L1\nL0:\n\tSUB sp, sp, #8\n\tLDR r4, [sp, #12]\n\tSTR r4, [sp, #4]\n\tB L2\nL3:\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #4]\nL2:\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tCMP r4, #1\n\tBEQ L3\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, [sp, #12]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #-4]!\n\tBL f_f\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tADD sp, sp, #8\nL1:\n\tLDR r4, =0\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =0\n\tSTR r4, [sp, #4]\n\tADD r4, sp, #4\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_f\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_4\n\tBL p_throw_runtime_error\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/function/nested_functions/printTriangle.wacc": ".data\n\nmsg_0:\n\t.word 1\n\t.ascii\t\"-\"\nmsg_1:\n\t.word 0\n\t.ascii\t\"\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_4:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nf_f:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tB L1\nL0:\n\tSUB sp, sp, #8\n\tLDR r4, [sp, #12]\n\tSTR r4, [sp, #4]\n\tB L2\nL3:\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #4]\nL2:\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tCMP r4, #1\n\tBEQ L3\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, [sp, #12]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #-4]!\n\tBL f_f\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tADD sp, sp, #8\nL1:\n\tLDR r4, =0\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =8\n\tSTR r4, [sp, #-4]!\n\tBL f_f\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_3\n\tBL p_throw_runtime_error\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/function/nested_functions/simpleRecursion.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nf_rec:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tB L1\nL0:\n\tSUB sp, sp, #4\n\tLDR r4, [sp, #8]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #-4]!\n\tBL f_rec\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tADD sp, sp, #4\nL1:\n\tLDR r4, =42\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, =8\n\tSTR r4, [sp, #-4]!\n\tBL f_rec\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/function/simple_functions/asciiTable.wacc": ".data\n\nmsg_0:\n\t.word 1\n\t.ascii\t\"-\"\nmsg_1:\n\t.word 0\n\t.ascii\t\"\"\nmsg_2:\n\t.word 3\n\t.ascii\t\"|  \"\nmsg_3:\n\t.word 1\n\t.ascii\t\" \"\nmsg_4:\n\t.word 3\n\t.ascii\t\" = \"\nmsg_5:\n\t.word 3\n\t.ascii\t\"  |\"\nmsg_6:\n\t.word 28\n\t.ascii\t\"Asci character lookup table:\"\nmsg_7:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_8:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_9:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_10:\n\t.word 3\n\t.ascii\t\"%d\\0\"\n\n.text\n\n.global main\nf_printLine:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L0\nL1:\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\nL0:\n\tLDR r4, [sp]\n\tLDR r5, [sp, #8]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tMOV r4, #1\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nf_printMap:\n\tPUSH {lr}\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tLDR r5, =100\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #0\n\tBEQ L2\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tB L3\nL2:\nL3:\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_4\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL putchar\n\tLDR r4, =msg_5\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tMOV r4, #1\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #5\n\tLDR r4, =msg_6\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =13\n\tSTR r4, [sp, #-4]!\n\tBL f_printLine\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp, #4]\n\tMOV r4, #' '\n\tSTR r4, [sp]\n\tB L4\nL5:\n\tLDR r4, [sp]\n\tSTR r4, [sp, #-4]!\n\tBL f_printMap\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp, #4]\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\nL4:\n\tLDR r4, [sp]\n\tLDR r5, =127\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #1\n\tBEQ L5\n\tLDR r4, =13\n\tSTR r4, [sp, #-4]!\n\tBL f_printLine\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTRB r4, [sp, #4]\n\tADD sp, sp, #5\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_7\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_8\n\tBL p_throw_runtime_error\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_9\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_10\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/function/simple_functions/functionDeclaration.wacc": ".text\n\n.global main\nf_f:\n\tPUSH {lr}\n\tLDR r4, =0\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/function/simple_functions/functionManyArguments.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"a is \"\nmsg_1:\n\t.word 5\n\t.ascii\t\"b is \"\nmsg_2:\n\t.word 5\n\t.ascii\t\"c is \"\nmsg_3:\n\t.word 5\n\t.ascii\t\"d is \"\nmsg_4:\n\t.word 5\n\t.ascii\t\"e is \"\nmsg_5:\n\t.word 5\n\t.ascii\t\"f is \"\nmsg_6:\n\t.word 5\n\t.ascii\t\"hello\"\nmsg_7:\n\t.word 10\n\t.ascii\t\"answer is \"\nmsg_8:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_9:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_10:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_11:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_12:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_13:\n\t.word 3\n\t.ascii\t\"%p\\0\"\n\n.text\n\n.global main\nf_doSomething:\n\tPUSH {lr}\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDRSB r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tLDRSB r4, [sp, #9]\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #10]\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_4\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #14]\n\tMOV r0, r4\n\tBL p_print_reference\n\tBL p_print_ln\n\tLDR r4, =msg_5\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #18]\n\tMOV r0, r4\n\tBL p_print_reference\n\tBL p_print_ln\n\tMOV r4, #'g'\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #9\n\tLDR r0, =6\n\tBL malloc\n\tMOV r4, r0\n\tMOV r5, #0\n\tSTRB r5, [r4, #4]\n\tMOV r5, #1\n\tSTRB r5, [r4, #5]\n\tLDR r5, =2\n\tSTR r5, [r4]\n\tSTR r4, [sp, #5]\n\tLDR r0, =12\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =1\n\tSTR r5, [r4, #4]\n\tLDR r5, =2\n\tSTR r5, [r4, #8]\n\tLDR r5, =2\n\tSTR r5, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #1]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, [sp, #9]\n\tSTR r4, [sp, #-4]!\n\tLDR r4, =msg_6\n\tSTR r4, [sp, #-4]!\n\tMOV r4, #'u'\n\tSTRB r4, [sp, #-1]!\n\tMOV r4, #1\n\tSTRB r4, [sp, #-1]!\n\tLDR r4, =42\n\tSTR r4, [sp, #-4]!\n\tBL f_doSomething\n\tADD sp, sp, #18\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDR r4, =msg_7\n\tMOV r0, r4\n\tBL p_print_string\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tADD sp, sp, #9\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_8\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_9\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_10\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_11\n\tLDREQ r0, =msg_12\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_reference:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_13\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/function/simple_functions/functionReturnPair.wacc": ".data\n\nmsg_0:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nf_getPair:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =10\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, =15\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tBL f_getPair\n\tMOV r4, r0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/function/simple_functions/functionSimple.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nf_f:\n\tPUSH {lr}\n\tLDR r4, =0\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tBL f_f\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/function/simple_functions/functionSimpleLoop.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nf_f:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L0\nL1:\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\nL0:\n\tLDR r4, [sp]\n\tLDR r5, [sp, #8]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tADD sp, sp, #4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =10\n\tSTR r4, [sp, #-4]!\n\tBL f_f\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/function/simple_functions/functionUpdateParameter.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"x is \"\nmsg_1:\n\t.word 9\n\t.ascii\t\"x is now \"\nmsg_2:\n\t.word 5\n\t.ascii\t\"y is \"\nmsg_3:\n\t.word 11\n\t.ascii\t\"y is still \"\nmsg_4:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_5:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_6:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nf_f:\n\tPUSH {lr}\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, =5\n\tSTR r4, [sp, #4]\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =1\n\tSTR r4, [sp, #4]\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #-4]!\n\tBL f_f\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/function/simple_functions/incFunction.wacc": ".data\n\nmsg_0:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nf_inc:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tSTR r4, [sp, #-4]!\n\tBL f_inc\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tSTR r4, [sp, #-4]!\n\tBL f_inc\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tSTR r4, [sp, #-4]!\n\tBL f_inc\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tSTR r4, [sp, #-4]!\n\tBL f_inc\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_0\n\tBL p_throw_runtime_error\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/function/simple_functions/negFunction.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nf_neg:\n\tPUSH {lr}\n\tLDRSB r4, [sp, #4]\n\tEOR r4, r4, #1\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tMOV r4, #1\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDRSB r4, [sp]\n\tSTRB r4, [sp, #-1]!\n\tBL f_neg\n\tADD sp, sp, #1\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDRSB r4, [sp]\n\tSTRB r4, [sp, #-1]!\n\tBL f_neg\n\tADD sp, sp, #1\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tSTRB r4, [sp, #-1]!\n\tBL f_neg\n\tADD sp, sp, #1\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tSTRB r4, [sp, #-1]!\n\tBL f_neg\n\tADD sp, sp, #1\n\tMOV r4, r0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/function/simple_functions/sameArgName.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nf_f:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =99\n\tSTR r4, [sp, #-4]!\n\tBL f_f\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/function/simple_functions/sameArgName2.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nf_f:\n\tPUSH {lr}\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =99\n\tSTR r4, [sp, #-4]!\n\tBL f_f\n\tADD sp, sp, #4\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/function/simple_functions/sameNameAsVar.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nf_f:\n\tPUSH {lr}\n\tLDR r4, =5\n\tMOV r0, r4\n\tPOP {pc}\n\tPOP {pc}\n\t.ltorg\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tBL f_f\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/if/if1.wacc": ".data\n\nmsg_0:\n\t.word 7\n\t.ascii\t\"correct\"\nmsg_1:\n\t.word 9\n\t.ascii\t\"incorrect\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =13\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tLDR r5, =13\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L1\nL0:\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL1:\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/if/if2.wacc": ".data\n\nmsg_0:\n\t.word 9\n\t.ascii\t\"incorrect\"\nmsg_1:\n\t.word 7\n\t.ascii\t\"correct\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =13\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tLDR r5, =13\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L1\nL0:\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL1:\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/if/if3.wacc": ".data\n\nmsg_0:\n\t.word 7\n\t.ascii\t\"correct\"\nmsg_1:\n\t.word 9\n\t.ascii\t\"incorrect\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =13\n\tSTR r4, [sp, #4]\n\tLDR r4, =37\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L1\nL0:\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL1:\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/if/if4.wacc": ".data\n\nmsg_0:\n\t.word 9\n\t.ascii\t\"incorrect\"\nmsg_1:\n\t.word 7\n\t.ascii\t\"correct\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #2\n\tMOV r4, #1\n\tSTRB r4, [sp, #1]\n\tMOV r4, #0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp, #1]\n\tLDRSB r5, [sp]\n\tAND r4, r4, r5\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L1\nL0:\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL1:\n\tADD sp, sp, #2\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/if/if5.wacc": ".data\n\nmsg_0:\n\t.word 7\n\t.ascii\t\"correct\"\nmsg_1:\n\t.word 9\n\t.ascii\t\"incorrect\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #2\n\tMOV r4, #1\n\tSTRB r4, [sp, #1]\n\tMOV r4, #0\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp, #1]\n\tLDRSB r5, [sp]\n\tORR r4, r4, r5\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L1\nL0:\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL1:\n\tADD sp, sp, #2\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/if/if6.wacc": ".data\n\nmsg_0:\n\t.word 9\n\t.ascii\t\"incorrect\"\nmsg_1:\n\t.word 7\n\t.ascii\t\"correct\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #2\n\tMOV r4, #'f'\n\tSTRB r4, [sp, #1]\n\tMOV r4, #'F'\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp, #1]\n\tLDRSB r5, [sp]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L1\nL0:\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL1:\n\tADD sp, sp, #2\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/if/ifBasic.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tMOV r4, #1\n\tCMP r4, #0\n\tBEQ L0\n\tB L1\nL0:\nL1:\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/if/ifFalse.wacc": ".data\n\nmsg_0:\n\t.word 8\n\t.ascii\t\"not here\"\nmsg_1:\n\t.word 4\n\t.ascii\t\"here\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tMOV r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L1\nL0:\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL1:\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/if/ifTrue.wacc": ".data\n\nmsg_0:\n\t.word 4\n\t.ascii\t\"here\"\nmsg_1:\n\t.word 8\n\t.ascii\t\"not here\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tMOV r4, #1\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L1\nL0:\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL1:\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/if/whitespace.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =13\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tLDR r5, =13\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, =1\n\tSTR r4, [sp]\n\tB L1\nL0:\n\tLDR r4, =0\n\tSTR r4, [sp]\nL1:\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/IOLoop.wacc": ".data\n\nmsg_0:\n\t.word 25\n\t.ascii\t\"Please input an integer: \"\nmsg_1:\n\t.word 12\n\t.ascii\t\"echo input: \"\nmsg_2:\n\t.word 39\n\t.ascii\t\"Do you want to continue entering input?\"\nmsg_3:\n\t.word 34\n\t.ascii\t\"(enter Y for \\'yes\\' and N for \\'no\\')\"\nmsg_4:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_5:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_6:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_7:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_8:\n\t.word 4\n\t.ascii\t\" %c\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #5\n\tMOV r4, #'Y'\n\tSTRB r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L0\nL1:\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD r4, sp, #4\n\tMOV r0, r4\n\tBL p_read_char\nL0:\n\tLDRSB r4, [sp, #4]\n\tMOV r5, #'N'\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tADD sp, sp, #5\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_7\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_char:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_8\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\n",
    "testcases/valid/IO/IOSequence.wacc": ".data\n\nmsg_0:\n\t.word 25\n\t.ascii\t\"Please input an integer: \"\nmsg_1:\n\t.word 11\n\t.ascii\t\"You input: \"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_4:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_5:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/print/hashInProgram.wacc": ".data\n\nmsg_0:\n\t.word 33\n\t.ascii\t\"We can print the hash character: \"\nmsg_1:\n\t.word 41\n\t.ascii\t\"We can also print # when its in a string.\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tMOV r4, #'#'\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/print/multipleStringsAssignment.wacc": ".data\n\nmsg_0:\n\t.word 2\n\t.ascii\t\"Hi\"\nmsg_1:\n\t.word 2\n\t.ascii\t\"Hi\"\nmsg_2:\n\t.word 6\n\t.ascii\t\"s1 is \"\nmsg_3:\n\t.word 6\n\t.ascii\t\"s2 is \"\nmsg_4:\n\t.word 25\n\t.ascii\t\"They are the same string.\"\nmsg_5:\n\t.word 29\n\t.ascii\t\"They are not the same string.\"\nmsg_6:\n\t.word 16\n\t.ascii\t\"Now make s1 = s2\"\nmsg_7:\n\t.word 6\n\t.ascii\t\"s1 is \"\nmsg_8:\n\t.word 6\n\t.ascii\t\"s2 is \"\nmsg_9:\n\t.word 25\n\t.ascii\t\"They are the same string.\"\nmsg_10:\n\t.word 29\n\t.ascii\t\"They are not the same string.\"\nmsg_11:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_12:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =msg_0\n\tSTR r4, [sp, #4]\n\tLDR r4, =msg_1\n\tSTR r4, [sp]\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, =msg_4\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L1\nL0:\n\tLDR r4, =msg_5\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL1:\n\tLDR r4, =msg_6\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tSTR r4, [sp, #4]\n\tLDR r4, =msg_7\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_8\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L2\n\tLDR r4, =msg_9\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L3\nL2:\n\tLDR r4, =msg_10\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL3:\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_11\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_12\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/print/print-backspace.wacc": ".data\n\nmsg_0:\n\t.word 14\n\t.ascii\t\"Hello\\b World!\\n\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/print/print-carridge-return.wacc": ".data\n\nmsg_0:\n\t.word 15\n\t.ascii\t\"Hello \\r World!\\n\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/print/print.wacc": ".data\n\nmsg_0:\n\t.word 13\n\t.ascii\t\"Hello World!\\n\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/print/printBool.wacc": ".data\n\nmsg_0:\n\t.word 8\n\t.ascii\t\"True is \"\nmsg_1:\n\t.word 9\n\t.ascii\t\"False is \"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_4:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_5:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tMOV r4, #1\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tMOV r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_3\n\tLDREQ r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/print/printChar.wacc": ".data\n\nmsg_0:\n\t.word 30\n\t.ascii\t\"A simple character example is \"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tMOV r4, #'f'\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/print/printCharArray.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r0, =7\n\tBL malloc\n\tMOV r4, r0\n\tMOV r5, #'h'\n\tSTRB r5, [r4, #4]\n\tMOV r5, #'i'\n\tSTRB r5, [r4, #5]\n\tMOV r5, #'!'\n\tSTRB r5, [r4, #6]\n\tLDR r5, =3\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/print/printCharAsString.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r0, =7\n\tBL malloc\n\tMOV r4, r0\n\tMOV r5, #'f'\n\tSTRB r5, [r4, #4]\n\tMOV r5, #'o'\n\tSTRB r5, [r4, #5]\n\tMOV r5, #'o'\n\tSTRB r5, [r4, #6]\n\tLDR r5, =3\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r0, =7\n\tBL malloc\n\tMOV r4, r0\n\tMOV r5, #'b'\n\tSTRB r5, [r4, #4]\n\tMOV r5, #'a'\n\tSTRB r5, [r4, #5]\n\tMOV r5, #'r'\n\tSTRB r5, [r4, #6]\n\tLDR r5, =3\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/print/printEscChar.wacc": ".data\n\nmsg_0:\n\t.word 32\n\t.ascii\t\"An escaped character example is \"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tMOV r4, #'\"'\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/print/printInt.wacc": ".data\n\nmsg_0:\n\t.word 22\n\t.ascii\t\"An example integer is \"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, =189\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/print/println.wacc": ".data\n\nmsg_0:\n\t.word 12\n\t.ascii\t\"Hello World!\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/read/echoBigInt.wacc": ".data\n\nmsg_0:\n\t.word 24\n\t.ascii\t\"enter an integer to echo\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_4:\n\t.word 3\n\t.ascii\t\"%d\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =1\n\tSTR r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/read/echoBigNegInt.wacc": ".data\n\nmsg_0:\n\t.word 24\n\t.ascii\t\"enter an integer to echo\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_4:\n\t.word 3\n\t.ascii\t\"%d\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =1\n\tSTR r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/read/echoChar.wacc": ".data\n\nmsg_0:\n\t.word 25\n\t.ascii\t\"enter a character to echo\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 4\n\t.ascii\t\" %c\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tMOV r4, #0\n\tSTRB r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_char\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_char:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\n",
    "testcases/valid/IO/read/echoInt.wacc": ".data\n\nmsg_0:\n\t.word 24\n\t.ascii\t\"enter an integer to echo\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_4:\n\t.word 3\n\t.ascii\t\"%d\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =1\n\tSTR r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/read/echoNegInt.wacc": ".data\n\nmsg_0:\n\t.word 24\n\t.ascii\t\"enter an integer to echo\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_4:\n\t.word 3\n\t.ascii\t\"%d\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =1\n\tSTR r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/IO/read/echoPuncChar.wacc": ".data\n\nmsg_0:\n\t.word 25\n\t.ascii\t\"enter a character to echo\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 4\n\t.ascii\t\" %c\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tMOV r4, #0\n\tSTRB r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_char\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_char:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\n",
    "testcases/valid/IO/read/read.wacc": ".data\n\nmsg_0:\n\t.word 31\n\t.ascii\t\"input an integer to continue...\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%d\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =10\n\tSTR r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_int\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\n",
    "testcases/valid/pairs/checkRefPair.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%p\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_3:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_4:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_5:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_6:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #18\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =10\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tMOV r5, #'a'\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #14]\n\tLDR r4, [sp, #14]\n\tSTR r4, [sp, #10]\n\tLDR r4, [sp, #14]\n\tMOV r0, r4\n\tBL p_print_reference\n\tBL p_print_ln\n\tLDR r4, [sp, #10]\n\tMOV r0, r4\n\tBL p_print_reference\n\tBL p_print_ln\n\tLDR r4, [sp, #14]\n\tLDR r5, [sp, #10]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, [sp, #14]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #6]\n\tLDR r4, [sp, #10]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #2]\n\tLDR r4, [sp, #6]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp, #2]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp, #6]\n\tLDR r5, [sp, #2]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tLDR r4, [sp, #14]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #1]\n\tLDR r4, [sp, #10]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp, #1]\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tLDRSB r4, [sp, #1]\n\tLDRSB r5, [sp]\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #18\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_reference:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_2\n\tLDREQ r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_4\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/pairs/createPair.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =10\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, =3\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/pairs/createPair02.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tMOV r5, #'a'\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4]\n\tMOV r5, #'b'\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/pairs/createPair03.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =10\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tMOV r5, #'a'\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/pairs/createRefPair.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =10\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tMOV r5, #'a'\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp]\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/pairs/free.wacc": ".data\n\nmsg_0:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =10\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tMOV r5, #'a'\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_free_pair\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_free_pair:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_0\n\tBEQ p_throw_runtime_error\n\tPUSH {r0}\n\tLDR r0, [r0]\n\tBL free\n\tLDR r0, [sp]\n\tLDR r0, [r0, #4]\n\tBL free\n\tPOP {r0}\n\tBL free\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/pairs/linkedList.wacc": ".data\n\nmsg_0:\n\t.word 8\n\t.ascii\t\"list = {\"\nmsg_1:\n\t.word 2\n\t.ascii\t\", \"\nmsg_2:\n\t.word 1\n\t.ascii\t\"}\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_4:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_5:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_6:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #28\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =11\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, =0\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #24]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =4\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, [sp, #24]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #20]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =2\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, [sp, #20]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #16]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =1\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, [sp, #16]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #12]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #12]\n\tSTR r4, [sp, #8]\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L0\nL1:\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #8]\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\nL0:\n\tLDR r4, [sp, #4]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #28\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_4\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/pairs/nestedPair.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =2\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, =3\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #4]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =1\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, [sp, #4]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp]\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/pairs/null.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%p\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_reference\n\tBL p_print_ln\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_reference\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_reference:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/pairs/printNull.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%p\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =0\n\tMOV r0, r4\n\tBL p_print_reference\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_reference:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/pairs/printNullPair.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%p\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_reference\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_reference:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/pairs/printPair.wacc": ".data\n\nmsg_0:\n\t.word 4\n\t.ascii\t\" = (\"\nmsg_1:\n\t.word 2\n\t.ascii\t\", \"\nmsg_2:\n\t.word 3\n\t.ascii\t\"%p\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_4:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_5:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_6:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #9\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =10\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tMOV r5, #'a'\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #5]\n\tLDR r4, [sp, #5]\n\tMOV r0, r4\n\tBL p_print_reference\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #5]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #1]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #5]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL putchar\n\tMOV r4, #')'\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tADD sp, sp, #9\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_reference:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_4\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/pairs/printPairOfNulls.wacc": ".data\n\nmsg_0:\n\t.word 4\n\t.ascii\t\" = (\"\nmsg_1:\n\t.word 1\n\t.ascii\t\",\"\nmsg_2:\n\t.word 1\n\t.ascii\t\")\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%p\\0\"\nmsg_4:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_5:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_6:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #12\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =0\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, =0\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #8]\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_reference\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_reference\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_reference\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #12\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_reference:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_5\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/pairs/readPair.wacc": ".data\n\nmsg_0:\n\t.word 39\n\t.ascii\t\"Please enter the first element (char): \"\nmsg_1:\n\t.word 39\n\t.ascii\t\"Please enter the second element (int): \"\nmsg_2:\n\t.word 22\n\t.ascii\t\"The first element was \"\nmsg_3:\n\t.word 23\n\t.ascii\t\"The second element was \"\nmsg_4:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_5:\n\t.word 4\n\t.ascii\t\" %c\\0\"\nmsg_6:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_7:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_8:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_9:\n\t.word 3\n\t.ascii\t\"%d\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #9\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tMOV r5, #0\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, =0\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #5]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tMOV r4, #'0'\n\tSTRB r4, [sp, #4]\n\tADD r4, sp, #4\n\tMOV r0, r4\n\tBL p_read_char\n\tLDRSB r4, [sp, #4]\n\tLDR r5, [sp, #5]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5]\n\tSTRB r4, [r5]\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, [sp]\n\tLDR r5, [sp, #5]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5, #4]\n\tSTR r4, [r5]\n\tMOV r4, #0\n\tSTRB r4, [sp, #4]\n\tLDR r4, =-1\n\tSTR r4, [sp]\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #5]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #4]\n\tLDRSB r4, [sp, #4]\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #5]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #9\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_char:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_6\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_7\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_8\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_9\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/pairs/writeFst.wacc": ".data\n\nmsg_0:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =10\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tMOV r5, #'a'\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, =42\n\tLDR r5, [sp, #4]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5]\n\tSTR r4, [r5]\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/pairs/writeSnd.wacc": ".data\n\nmsg_0:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #5\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =10\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tMOV r5, #'a'\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #1]\n\tLDR r4, [sp, #1]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tMOV r4, #'Z'\n\tLDR r5, [sp, #1]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5, #4]\n\tSTRB r4, [r5]\n\tLDR r4, [sp, #1]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tADD sp, sp, #5\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/arrayOutOfBounds/arrayNegBounds.wacc": ".data\n\nmsg_0:\n\t.word 44\n\t.ascii\t\"ArrayIndexOutOfBoundsError: negative index\\n\\0\"\nmsg_1:\n\t.word 45\n\t.ascii\t\"ArrayIndexOutOfBoundsError: index too large\\n\\0\"\nmsg_2:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_4:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r0, =20\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =43\n\tSTR r5, [r4, #4]\n\tLDR r5, =2\n\tSTR r5, [r4, #8]\n\tLDR r5, =18\n\tSTR r5, [r4, #12]\n\tLDR r5, =1\n\tSTR r5, [r4, #16]\n\tLDR r5, =4\n\tSTR r5, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r0, =16\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =1\n\tSTR r5, [r4, #4]\n\tLDR r5, =2\n\tSTR r5, [r4, #8]\n\tLDR r5, =3\n\tSTR r5, [r4, #12]\n\tLDR r5, =3\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tADD r4, sp, #4\n\tLDR r5, =-2\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_array_bounds:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRLT r0, =msg_0\n\tBLLT p_throw_runtime_error\n\tLDR r1, [r1]\n\tCMP r0, r1\n\tLDRCS r0, =msg_1\n\tBLCS p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/arrayOutOfBounds/arrayOutOfBounds.wacc": ".data\n\nmsg_0:\n\t.word 44\n\t.ascii\t\"ArrayIndexOutOfBoundsError: negative index\\n\\0\"\nmsg_1:\n\t.word 45\n\t.ascii\t\"ArrayIndexOutOfBoundsError: index too large\\n\\0\"\nmsg_2:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_4:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r0, =16\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =1\n\tSTR r5, [r4, #4]\n\tLDR r5, =2\n\tSTR r5, [r4, #8]\n\tLDR r5, =3\n\tSTR r5, [r4, #12]\n\tLDR r5, =3\n\tSTR r5, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r0, =20\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =43\n\tSTR r5, [r4, #4]\n\tLDR r5, =2\n\tSTR r5, [r4, #8]\n\tLDR r5, =18\n\tSTR r5, [r4, #12]\n\tLDR r5, =1\n\tSTR r5, [r4, #16]\n\tLDR r5, =4\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tADD r4, sp, #0\n\tLDR r5, =5\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_array_bounds:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRLT r0, =msg_0\n\tBLLT p_throw_runtime_error\n\tLDR r1, [r1]\n\tCMP r0, r1\n\tLDRCS r0, =msg_1\n\tBLCS p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/arrayOutOfBounds/arrayOutOfBoundsWrite.wacc": ".data\n\nmsg_0:\n\t.word 44\n\t.ascii\t\"ArrayIndexOutOfBoundsError: negative index\\n\\0\"\nmsg_1:\n\t.word 45\n\t.ascii\t\"ArrayIndexOutOfBoundsError: index too large\\n\\0\"\nmsg_2:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_4:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r0, =16\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =1\n\tSTR r5, [r4, #4]\n\tLDR r5, =2\n\tSTR r5, [r4, #8]\n\tLDR r5, =3\n\tSTR r5, [r4, #12]\n\tLDR r5, =3\n\tSTR r5, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r0, =20\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =43\n\tSTR r5, [r4, #4]\n\tLDR r5, =2\n\tSTR r5, [r4, #8]\n\tLDR r5, =18\n\tSTR r5, [r4, #12]\n\tLDR r5, =1\n\tSTR r5, [r4, #16]\n\tLDR r5, =4\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tLDR r4, =100\n\tADD r5, sp, #0\n\tLDR r6, =5\n\tLDR r5, [r5]\n\tMOV r0, r6\n\tMOV r1, r5\n\tBL p_check_array_bounds\n\tADD r5, r5, #4\n\tADD r5, r5, r6, LSL #2\n\tSTR r4, [r5]\n\tADD r4, sp, #0\n\tLDR r6, =5\n\tLDR r4, [r4]\n\tMOV r0, r6\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r6, LSL #2\n\tLDR r4, [r4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_array_bounds:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRLT r0, =msg_0\n\tBLLT p_throw_runtime_error\n\tLDR r1, [r1]\n\tCMP r0, r1\n\tLDRCS r0, =msg_1\n\tBLCS p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/divideByZero/divideByZero.wacc": ".data\n\nmsg_0:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =10\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r4, r0\n\tMOV r0, r4\n\tBL p_print_int\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/divideByZero/divZero.wacc": ".data\n\nmsg_0:\n\t.word 21\n\t.ascii\t\"should not reach here\"\nmsg_1:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =10\n\tLDR r5, =0\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idiv\n\tMOV r4, r0\n\tSTR r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_1\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/runtimeErr/divideByZero/modByZero.wacc": ".data\n\nmsg_0:\n\t.word 45\n\t.ascii\t\"DivideByZeroError: divide or modulo by zero\\n\\0\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =10\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tLDR r5, [sp]\n\tMOV r0, r4\n\tMOV r1, r5\n\tBL p_check_divide_by_zero\n\tBL __aeabi_idivmod\n\tMOV r4, r1\n\tMOV r0, r4\n\tBL p_print_int\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_divide_by_zero:\n\tPUSH {lr}\n\tCMP r1, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/integerOverflow/intJustOverflow.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_2:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =2147483646\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_2\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/integerOverflow/intmultOverflow.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_2:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =2147483\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1000\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1000\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1000\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_2\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/integerOverflow/intnegateOverflow.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_2:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =-2147483648\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tRSBS r4, r4, #0\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_2\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/integerOverflow/intnegateOverflow2.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_2:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =-2147483648\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =10\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_2\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/integerOverflow/intnegateOverflow3.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_2:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =-20000\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =100000000\n\tSMULL r4, r5, r4, r5\n\tCMP r5, r4, ASR #31\n\tBLNE p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_2\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/integerOverflow/intnegateOverflow4.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_2:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =-2000000000\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =2000000000\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_2\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/integerOverflow/intUnderflow.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_2:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =-2147483647\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_2\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/integerOverflow/intWayOverflow.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_2:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =2000000000\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =2000000000\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_2\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/nullDereference/freeNull.wacc": ".data\n\nmsg_0:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_free_pair\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_free_pair:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_0\n\tBEQ p_throw_runtime_error\n\tPUSH {r0}\n\tLDR r0, [r0]\n\tBL free\n\tLDR r0, [sp]\n\tLDR r0, [r0, #4]\n\tBL free\n\tPOP {r0}\n\tBL free\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/nullDereference/readNull1.wacc": ".data\n\nmsg_0:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tMOV r0, r4\n\tBL p_read_int\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/nullDereference/readNull2.wacc": ".data\n\nmsg_0:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tMOV r0, r4\n\tBL p_read_int\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/nullDereference/setNull1.wacc": ".data\n\nmsg_0:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, =1\n\tLDR r5, [sp]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5]\n\tSTR r4, [r5]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/nullDereference/setNull2.wacc": ".data\n\nmsg_0:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, =1\n\tLDR r5, [sp]\n\tMOV r0, r5\n\tBL p_check_null_pointer\n\tLDR r5, [r5, #4]\n\tSTR r4, [r5]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/nullDereference/useNull1.wacc": ".data\n\nmsg_0:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/runtimeErr/nullDereference/useNull2.wacc": ".data\n\nmsg_0:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =0\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_0\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/scope/ifNested1.wacc": ".data\n\nmsg_0:\n\t.word 7\n\t.ascii\t\"correct\"\nmsg_1:\n\t.word 9\n\t.ascii\t\"incorrect\"\nmsg_2:\n\t.word 9\n\t.ascii\t\"incorrect\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_4:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =13\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tLDR r5, =13\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, [sp]\n\tLDR r5, =5\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tCMP r4, #0\n\tBEQ L2\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L3\nL2:\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL3:\n\tB L1\nL0:\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL1:\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/scope/ifNested2.wacc": ".data\n\nmsg_0:\n\t.word 9\n\t.ascii\t\"incorrect\"\nmsg_1:\n\t.word 9\n\t.ascii\t\"incorrect\"\nmsg_2:\n\t.word 7\n\t.ascii\t\"correct\"\nmsg_3:\n\t.word 9\n\t.ascii\t\"incorrect\"\nmsg_4:\n\t.word 9\n\t.ascii\t\"incorrect\"\nmsg_5:\n\t.word 9\n\t.ascii\t\"incorrect\"\nmsg_6:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_7:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =13\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tLDR r5, =13\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #0\n\tBEQ L0\n\tLDR r4, [sp]\n\tLDR r5, =5\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tCMP r4, #0\n\tBEQ L2\n\tLDR r4, [sp]\n\tLDR r5, =10\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #0\n\tBEQ L4\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L5\nL4:\n\tLDR r4, [sp]\n\tLDR r5, =12\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tCMP r4, #0\n\tBEQ L6\n\tLDR r4, [sp]\n\tLDR r5, =13\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tCMP r4, #0\n\tBEQ L8\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L9\nL8:\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL9:\n\tB L7\nL6:\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL7:\nL5:\n\tB L3\nL2:\n\tLDR r4, =msg_4\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL3:\n\tB L1\nL0:\n\tLDR r4, =msg_5\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL1:\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_7\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/scope/indentationNotImportant.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tB L0\nL1:\nL0:\n\tMOV r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/scope/intsAndKeywords.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =125\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/scope/printAllTypes.wacc": ".data\n\nmsg_0:\n\t.word 2\n\t.ascii\t\", \"\nmsg_1:\n\t.word 16\n\t.ascii\t\"this is a string\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"array\"\nmsg_3:\n\t.word 2\n\t.ascii\t\"of\"\nmsg_4:\n\t.word 7\n\t.ascii\t\"strings\"\nmsg_5:\n\t.word 3\n\t.ascii\t\"( [\"\nmsg_6:\n\t.word 5\n\t.ascii\t\"] , [\"\nmsg_7:\n\t.word 3\n\t.ascii\t\"] )\"\nmsg_8:\n\t.word 2\n\t.ascii\t\"[ \"\nmsg_9:\n\t.word 4\n\t.ascii\t\" = (\"\nmsg_10:\n\t.word 3\n\t.ascii\t\"), \"\nmsg_11:\n\t.word 4\n\t.ascii\t\" = (\"\nmsg_12:\n\t.word 3\n\t.ascii\t\") ]\"\nmsg_13:\n\t.word 50\n\t.ascii\t\"NullReferenceError: dereference a null reference\\n\\0\"\nmsg_14:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_15:\n\t.word 44\n\t.ascii\t\"ArrayIndexOutOfBoundsError: negative index\\n\\0\"\nmsg_16:\n\t.word 45\n\t.ascii\t\"ArrayIndexOutOfBoundsError: index too large\\n\\0\"\nmsg_17:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_18:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_19:\n\t.word 3\n\t.ascii\t\"%p\\0\"\nmsg_20:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_21:\n\t.word 6\n\t.ascii\t\"false\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =msg_0\n\tSTR r4, [sp, #4]\n\tLDR r4, =5\n\tSTR r4, [sp]\n\tSUB sp, sp, #1\n\tMOV r4, #'x'\n\tSTRB r4, [sp]\n\tSUB sp, sp, #1\n\tMOV r4, #1\n\tSTRB r4, [sp]\n\tSUB sp, sp, #4\n\tLDR r4, =msg_1\n\tSTR r4, [sp]\n\tSUB sp, sp, #16\n\tLDR r0, =16\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =1\n\tSTR r5, [r4, #4]\n\tLDR r5, =2\n\tSTR r5, [r4, #8]\n\tLDR r5, =3\n\tSTR r5, [r4, #12]\n\tLDR r5, =3\n\tSTR r5, [r4]\n\tSTR r4, [sp, #12]\n\tSUB sp, sp, #4\n\tLDR r0, =7\n\tBL malloc\n\tMOV r4, r0\n\tMOV r5, #'x'\n\tSTRB r5, [r4, #4]\n\tMOV r5, #'y'\n\tSTRB r5, [r4, #5]\n\tMOV r5, #'z'\n\tSTRB r5, [r4, #6]\n\tLDR r5, =3\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tSUB sp, sp, #4\n\tLDR r0, =7\n\tBL malloc\n\tMOV r4, r0\n\tMOV r5, #1\n\tSTRB r5, [r4, #4]\n\tMOV r5, #0\n\tSTRB r5, [r4, #5]\n\tMOV r5, #1\n\tSTRB r5, [r4, #6]\n\tLDR r5, =3\n\tSTR r5, [r4]\n\tSTR r4, [sp]\n\tSUB sp, sp, #16\n\tLDR r0, =16\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =msg_2\n\tSTR r5, [r4, #4]\n\tLDR r5, =msg_3\n\tSTR r5, [r4, #8]\n\tLDR r5, =msg_4\n\tSTR r5, [r4, #12]\n\tLDR r5, =3\n\tSTR r5, [r4]\n\tSTR r4, [sp, #12]\n\tSUB sp, sp, #12\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =1\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, =2\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #8]\n\tSUB sp, sp, #24\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tMOV r5, #'a'\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4]\n\tMOV r5, #1\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #20]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tMOV r5, #'b'\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4]\n\tMOV r5, #0\n\tLDR r0, =1\n\tBL malloc\n\tSTRB r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #16]\n\tLDR r0, =12\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #20]\n\tSTR r5, [r4, #4]\n\tLDR r5, [sp, #16]\n\tSTR r5, [r4, #8]\n\tLDR r5, =2\n\tSTR r5, [r4]\n\tSTR r4, [sp, #12]\n\tSUB sp, sp, #20\n\tLDR r0, =16\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, =1\n\tSTR r5, [r4, #4]\n\tLDR r5, =2\n\tSTR r5, [r4, #8]\n\tLDR r5, =3\n\tSTR r5, [r4, #12]\n\tLDR r5, =3\n\tSTR r5, [r4]\n\tSTR r4, [sp, #16]\n\tLDR r0, =7\n\tBL malloc\n\tMOV r4, r0\n\tMOV r5, #'a'\n\tSTRB r5, [r4, #4]\n\tMOV r5, #'b'\n\tSTRB r5, [r4, #5]\n\tMOV r5, #'c'\n\tSTRB r5, [r4, #6]\n\tLDR r5, =3\n\tSTR r5, [r4]\n\tSTR r4, [sp, #12]\n\tLDR r0, =8\n\tBL malloc\n\tMOV r4, r0\n\tLDR r5, [sp, #16]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4]\n\tLDR r5, [sp, #12]\n\tLDR r0, =4\n\tBL malloc\n\tSTR r5, [r0]\n\tSTR r0, [r4, #4]\n\tSTR r4, [sp, #8]\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, =msg_5\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #4\n\tLDR r5, =0\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, [sp, #106]\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #4\n\tLDR r5, =1\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, [sp, #106]\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #4\n\tLDR r5, =2\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_6\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #0\n\tLDR r5, =0\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5\n\tLDRSB r4, [r4]\n\tMOV r0, r4\n\tBL putchar\n\tLDR r4, [sp, #106]\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #0\n\tLDR r5, =1\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5\n\tLDRSB r4, [r4]\n\tMOV r0, r4\n\tBL putchar\n\tLDR r4, [sp, #106]\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #0\n\tLDR r5, =2\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5\n\tLDRSB r4, [r4]\n\tMOV r0, r4\n\tBL putchar\n\tLDR r4, =msg_7\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #20\n\tADD r4, sp, #12\n\tLDR r5, =0\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #8]\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #7]\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #6]\n\tADD r4, sp, #12\n\tLDR r5, =1\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #2]\n\tLDR r4, [sp, #2]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp, #1]\n\tLDR r4, [sp, #2]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDRSB r4, [r4]\n\tSTRB r4, [sp]\n\tLDR r4, =msg_8\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_reference\n\tLDR r4, =msg_9\n\tMOV r0, r4\n\tBL p_print_string\n\tLDRSB r4, [sp, #7]\n\tMOV r0, r4\n\tBL putchar\n\tLDR r4, [sp, #86]\n\tMOV r0, r4\n\tBL p_print_string\n\tLDRSB r4, [sp, #6]\n\tMOV r0, r4\n\tBL p_print_bool\n\tLDR r4, =msg_10\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #2]\n\tMOV r0, r4\n\tBL p_print_reference\n\tLDR r4, =msg_11\n\tMOV r0, r4\n\tBL p_print_string\n\tLDRSB r4, [sp, #1]\n\tMOV r0, r4\n\tBL putchar\n\tLDR r4, [sp, #86]\n\tMOV r0, r4\n\tBL p_print_string\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL p_print_bool\n\tLDR r4, =msg_12\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #24\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4]\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_check_null_pointer\n\tLDR r4, [r4, #4]\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, [sp, #62]\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #12\n\tADD r4, sp, #12\n\tLDR r5, =0\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #8]\n\tADD r4, sp, #12\n\tLDR r5, =1\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tADD r4, sp, #12\n\tLDR r5, =2\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #50]\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #50]\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #16\n\tADD r4, sp, #0\n\tLDR r5, =0\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5\n\tLDRSB r4, [r4]\n\tMOV r0, r4\n\tBL p_print_bool\n\tLDR r4, [sp, #34]\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #0\n\tLDR r5, =1\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5\n\tLDRSB r4, [r4]\n\tMOV r0, r4\n\tBL p_print_bool\n\tLDR r4, [sp, #34]\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #0\n\tLDR r5, =2\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5\n\tLDRSB r4, [r4]\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tADD r4, sp, #12\n\tLDR r5, =0\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #8]\n\tADD r4, sp, #12\n\tLDR r5, =1\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp, #4]\n\tADD r4, sp, #12\n\tLDR r5, =2\n\tLDR r4, [r4]\n\tMOV r0, r5\n\tMOV r1, r4\n\tBL p_check_array_bounds\n\tADD r4, r4, #4\n\tADD r4, r4, r5, LSL #2\n\tLDR r4, [r4]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, [sp, #26]\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, [sp, #26]\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #16\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #1\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL putchar\n\tBL p_print_ln\n\tADD sp, sp, #1\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_check_null_pointer:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDREQ r0, =msg_13\n\tBLEQ p_throw_runtime_error\n\tPOP {pc}\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_14\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_check_array_bounds:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRLT r0, =msg_15\n\tBLLT p_throw_runtime_error\n\tLDR r1, [r1]\n\tCMP r0, r1\n\tLDRCS r0, =msg_16\n\tBLCS p_throw_runtime_error\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_17\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_18\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_reference:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_19\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_20\n\tLDREQ r0, =msg_21\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/scope/scope.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/scope/scopeBasic.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/scope/scopeRedefine.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%d\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =1\n\tSTR r4, [sp]\n\tSUB sp, sp, #1\n\tLDR r4, =2\n\tSTR r4, [sp, #1]\n\tMOV r4, #1\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #1\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/scope/scopeSimpleRedefine.wacc": ".data\n\nmsg_0:\n\t.word 5\n\t.ascii\t\"true\\0\"\nmsg_1:\n\t.word 6\n\t.ascii\t\"false\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%d\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =12\n\tSTR r4, [sp]\n\tSUB sp, sp, #1\n\tMOV r4, #1\n\tSTRB r4, [sp]\n\tLDRSB r4, [sp]\n\tMOV r0, r4\n\tBL p_print_bool\n\tBL p_print_ln\n\tADD sp, sp, #1\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_bool:\n\tPUSH {lr}\n\tCMP r0, #0\n\tLDRNE r0, =msg_0\n\tLDREQ r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/scope/scopeVars.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =2\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tSUB sp, sp, #4\n\tLDR r4, =4\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/sequence/basicSeq.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/sequence/basicSeq2.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/sequence/boolAssignment.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tMOV r4, #0\n\tSTRB r4, [sp]\n\tMOV r4, #1\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/sequence/charAssignment.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tMOV r4, #'a'\n\tSTRB r4, [sp]\n\tMOV r4, #'Z'\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/sequence/exitSimple.wacc": ".data\n\nmsg_0:\n\t.word 22\n\t.ascii\t\"Should not print this.\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tLDR r4, =42\n\tMOV r0, r4\n\tBL exit\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/sequence/intAssignment.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =10\n\tSTR r4, [sp]\n\tLDR r4, =20\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL exit\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/sequence/intLeadingZeros.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_1:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =42\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_0\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/sequence/stringAssignment.wacc": ".data\n\nmsg_0:\n\t.word 3\n\t.ascii\t\"foo\"\nmsg_1:\n\t.word 3\n\t.ascii\t\"bar\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =msg_0\n\tSTR r4, [sp]\n\tLDR r4, =msg_1\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/variables/boolDeclaration.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tMOV r4, #0\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/variables/boolDeclaration2.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tMOV r4, #1\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/variables/capCharDeclaration.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tMOV r4, #'M'\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/variables/charDeclaration.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tMOV r4, #'a'\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/variables/charDeclaration2.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tMOV r4, #'z'\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/variables/emptyStringDeclaration.wacc": ".data\n\nmsg_0:\n\t.word 0\n\t.ascii\t\"\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =msg_0\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/variables/intDeclaration.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =42\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/variables/longVarNames.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =5\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL exit\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/variables/manyVariables.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1024\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp, #1024]\n\tLDR r4, =1\n\tSTR r4, [sp, #1020]\n\tLDR r4, =2\n\tSTR r4, [sp, #1016]\n\tLDR r4, =3\n\tSTR r4, [sp, #1012]\n\tLDR r4, =4\n\tSTR r4, [sp, #1008]\n\tLDR r4, =5\n\tSTR r4, [sp, #1004]\n\tLDR r4, =6\n\tSTR r4, [sp, #1000]\n\tLDR r4, =7\n\tSTR r4, [sp, #996]\n\tLDR r4, =8\n\tSTR r4, [sp, #992]\n\tLDR r4, =9\n\tSTR r4, [sp, #988]\n\tLDR r4, =10\n\tSTR r4, [sp, #984]\n\tLDR r4, =11\n\tSTR r4, [sp, #980]\n\tLDR r4, =12\n\tSTR r4, [sp, #976]\n\tLDR r4, =13\n\tSTR r4, [sp, #972]\n\tLDR r4, =14\n\tSTR r4, [sp, #968]\n\tLDR r4, =15\n\tSTR r4, [sp, #964]\n\tLDR r4, =16\n\tSTR r4, [sp, #960]\n\tLDR r4, =17\n\tSTR r4, [sp, #956]\n\tLDR r4, =18\n\tSTR r4, [sp, #952]\n\tLDR r4, =19\n\tSTR r4, [sp, #948]\n\tLDR r4, =20\n\tSTR r4, [sp, #944]\n\tLDR r4, =21\n\tSTR r4, [sp, #940]\n\tLDR r4, =22\n\tSTR r4, [sp, #936]\n\tLDR r4, =23\n\tSTR r4, [sp, #932]\n\tLDR r4, =24\n\tSTR r4, [sp, #928]\n\tLDR r4, =25\n\tSTR r4, [sp, #924]\n\tLDR r4, =26\n\tSTR r4, [sp, #920]\n\tLDR r4, =27\n\tSTR r4, [sp, #916]\n\tLDR r4, =28\n\tSTR r4, [sp, #912]\n\tLDR r4, =29\n\tSTR r4, [sp, #908]\n\tLDR r4, =30\n\tSTR r4, [sp, #904]\n\tLDR r4, =31\n\tSTR r4, [sp, #900]\n\tLDR r4, =32\n\tSTR r4, [sp, #896]\n\tLDR r4, =33\n\tSTR r4, [sp, #892]\n\tLDR r4, =34\n\tSTR r4, [sp, #888]\n\tLDR r4, =35\n\tSTR r4, [sp, #884]\n\tLDR r4, =36\n\tSTR r4, [sp, #880]\n\tLDR r4, =37\n\tSTR r4, [sp, #876]\n\tLDR r4, =38\n\tSTR r4, [sp, #872]\n\tLDR r4, =39\n\tSTR r4, [sp, #868]\n\tLDR r4, =40\n\tSTR r4, [sp, #864]\n\tLDR r4, =41\n\tSTR r4, [sp, #860]\n\tLDR r4, =42\n\tSTR r4, [sp, #856]\n\tLDR r4, =43\n\tSTR r4, [sp, #852]\n\tLDR r4, =44\n\tSTR r4, [sp, #848]\n\tLDR r4, =45\n\tSTR r4, [sp, #844]\n\tLDR r4, =46\n\tSTR r4, [sp, #840]\n\tLDR r4, =47\n\tSTR r4, [sp, #836]\n\tLDR r4, =48\n\tSTR r4, [sp, #832]\n\tLDR r4, =49\n\tSTR r4, [sp, #828]\n\tLDR r4, =50\n\tSTR r4, [sp, #824]\n\tLDR r4, =51\n\tSTR r4, [sp, #820]\n\tLDR r4, =52\n\tSTR r4, [sp, #816]\n\tLDR r4, =53\n\tSTR r4, [sp, #812]\n\tLDR r4, =54\n\tSTR r4, [sp, #808]\n\tLDR r4, =55\n\tSTR r4, [sp, #804]\n\tLDR r4, =56\n\tSTR r4, [sp, #800]\n\tLDR r4, =57\n\tSTR r4, [sp, #796]\n\tLDR r4, =58\n\tSTR r4, [sp, #792]\n\tLDR r4, =59\n\tSTR r4, [sp, #788]\n\tLDR r4, =60\n\tSTR r4, [sp, #784]\n\tLDR r4, =61\n\tSTR r4, [sp, #780]\n\tLDR r4, =62\n\tSTR r4, [sp, #776]\n\tLDR r4, =63\n\tSTR r4, [sp, #772]\n\tLDR r4, =64\n\tSTR r4, [sp, #768]\n\tLDR r4, =65\n\tSTR r4, [sp, #764]\n\tLDR r4, =66\n\tSTR r4, [sp, #760]\n\tLDR r4, =67\n\tSTR r4, [sp, #756]\n\tLDR r4, =68\n\tSTR r4, [sp, #752]\n\tLDR r4, =69\n\tSTR r4, [sp, #748]\n\tLDR r4, =70\n\tSTR r4, [sp, #744]\n\tLDR r4, =71\n\tSTR r4, [sp, #740]\n\tLDR r4, =72\n\tSTR r4, [sp, #736]\n\tLDR r4, =73\n\tSTR r4, [sp, #732]\n\tLDR r4, =74\n\tSTR r4, [sp, #728]\n\tLDR r4, =75\n\tSTR r4, [sp, #724]\n\tLDR r4, =76\n\tSTR r4, [sp, #720]\n\tLDR r4, =77\n\tSTR r4, [sp, #716]\n\tLDR r4, =78\n\tSTR r4, [sp, #712]\n\tLDR r4, =79\n\tSTR r4, [sp, #708]\n\tLDR r4, =80\n\tSTR r4, [sp, #704]\n\tLDR r4, =81\n\tSTR r4, [sp, #700]\n\tLDR r4, =82\n\tSTR r4, [sp, #696]\n\tLDR r4, =83\n\tSTR r4, [sp, #692]\n\tLDR r4, =84\n\tSTR r4, [sp, #688]\n\tLDR r4, =85\n\tSTR r4, [sp, #684]\n\tLDR r4, =86\n\tSTR r4, [sp, #680]\n\tLDR r4, =87\n\tSTR r4, [sp, #676]\n\tLDR r4, =88\n\tSTR r4, [sp, #672]\n\tLDR r4, =89\n\tSTR r4, [sp, #668]\n\tLDR r4, =90\n\tSTR r4, [sp, #664]\n\tLDR r4, =91\n\tSTR r4, [sp, #660]\n\tLDR r4, =92\n\tSTR r4, [sp, #656]\n\tLDR r4, =93\n\tSTR r4, [sp, #652]\n\tLDR r4, =94\n\tSTR r4, [sp, #648]\n\tLDR r4, =95\n\tSTR r4, [sp, #644]\n\tLDR r4, =96\n\tSTR r4, [sp, #640]\n\tLDR r4, =97\n\tSTR r4, [sp, #636]\n\tLDR r4, =98\n\tSTR r4, [sp, #632]\n\tLDR r4, =99\n\tSTR r4, [sp, #628]\n\tLDR r4, =100\n\tSTR r4, [sp, #624]\n\tLDR r4, =101\n\tSTR r4, [sp, #620]\n\tLDR r4, =102\n\tSTR r4, [sp, #616]\n\tLDR r4, =103\n\tSTR r4, [sp, #612]\n\tLDR r4, =104\n\tSTR r4, [sp, #608]\n\tLDR r4, =105\n\tSTR r4, [sp, #604]\n\tLDR r4, =106\n\tSTR r4, [sp, #600]\n\tLDR r4, =107\n\tSTR r4, [sp, #596]\n\tLDR r4, =108\n\tSTR r4, [sp, #592]\n\tLDR r4, =109\n\tSTR r4, [sp, #588]\n\tLDR r4, =110\n\tSTR r4, [sp, #584]\n\tLDR r4, =111\n\tSTR r4, [sp, #580]\n\tLDR r4, =112\n\tSTR r4, [sp, #576]\n\tLDR r4, =113\n\tSTR r4, [sp, #572]\n\tLDR r4, =114\n\tSTR r4, [sp, #568]\n\tLDR r4, =115\n\tSTR r4, [sp, #564]\n\tLDR r4, =116\n\tSTR r4, [sp, #560]\n\tLDR r4, =117\n\tSTR r4, [sp, #556]\n\tLDR r4, =118\n\tSTR r4, [sp, #552]\n\tLDR r4, =119\n\tSTR r4, [sp, #548]\n\tLDR r4, =120\n\tSTR r4, [sp, #544]\n\tLDR r4, =121\n\tSTR r4, [sp, #540]\n\tLDR r4, =122\n\tSTR r4, [sp, #536]\n\tLDR r4, =123\n\tSTR r4, [sp, #532]\n\tLDR r4, =124\n\tSTR r4, [sp, #528]\n\tLDR r4, =125\n\tSTR r4, [sp, #524]\n\tLDR r4, =126\n\tSTR r4, [sp, #520]\n\tLDR r4, =127\n\tSTR r4, [sp, #516]\n\tLDR r4, =128\n\tSTR r4, [sp, #512]\n\tLDR r4, =129\n\tSTR r4, [sp, #508]\n\tLDR r4, =130\n\tSTR r4, [sp, #504]\n\tLDR r4, =131\n\tSTR r4, [sp, #500]\n\tLDR r4, =132\n\tSTR r4, [sp, #496]\n\tLDR r4, =133\n\tSTR r4, [sp, #492]\n\tLDR r4, =134\n\tSTR r4, [sp, #488]\n\tLDR r4, =135\n\tSTR r4, [sp, #484]\n\tLDR r4, =136\n\tSTR r4, [sp, #480]\n\tLDR r4, =137\n\tSTR r4, [sp, #476]\n\tLDR r4, =138\n\tSTR r4, [sp, #472]\n\tLDR r4, =139\n\tSTR r4, [sp, #468]\n\tLDR r4, =140\n\tSTR r4, [sp, #464]\n\tLDR r4, =141\n\tSTR r4, [sp, #460]\n\tLDR r4, =142\n\tSTR r4, [sp, #456]\n\tLDR r4, =143\n\tSTR r4, [sp, #452]\n\tLDR r4, =144\n\tSTR r4, [sp, #448]\n\tLDR r4, =145\n\tSTR r4, [sp, #444]\n\tLDR r4, =146\n\tSTR r4, [sp, #440]\n\tLDR r4, =147\n\tSTR r4, [sp, #436]\n\tLDR r4, =148\n\tSTR r4, [sp, #432]\n\tLDR r4, =149\n\tSTR r4, [sp, #428]\n\tLDR r4, =150\n\tSTR r4, [sp, #424]\n\tLDR r4, =151\n\tSTR r4, [sp, #420]\n\tLDR r4, =152\n\tSTR r4, [sp, #416]\n\tLDR r4, =153\n\tSTR r4, [sp, #412]\n\tLDR r4, =154\n\tSTR r4, [sp, #408]\n\tLDR r4, =155\n\tSTR r4, [sp, #404]\n\tLDR r4, =156\n\tSTR r4, [sp, #400]\n\tLDR r4, =157\n\tSTR r4, [sp, #396]\n\tLDR r4, =158\n\tSTR r4, [sp, #392]\n\tLDR r4, =159\n\tSTR r4, [sp, #388]\n\tLDR r4, =160\n\tSTR r4, [sp, #384]\n\tLDR r4, =161\n\tSTR r4, [sp, #380]\n\tLDR r4, =162\n\tSTR r4, [sp, #376]\n\tLDR r4, =163\n\tSTR r4, [sp, #372]\n\tLDR r4, =164\n\tSTR r4, [sp, #368]\n\tLDR r4, =165\n\tSTR r4, [sp, #364]\n\tLDR r4, =166\n\tSTR r4, [sp, #360]\n\tLDR r4, =167\n\tSTR r4, [sp, #356]\n\tLDR r4, =168\n\tSTR r4, [sp, #352]\n\tLDR r4, =169\n\tSTR r4, [sp, #348]\n\tLDR r4, =170\n\tSTR r4, [sp, #344]\n\tLDR r4, =171\n\tSTR r4, [sp, #340]\n\tLDR r4, =172\n\tSTR r4, [sp, #336]\n\tLDR r4, =173\n\tSTR r4, [sp, #332]\n\tLDR r4, =174\n\tSTR r4, [sp, #328]\n\tLDR r4, =175\n\tSTR r4, [sp, #324]\n\tLDR r4, =176\n\tSTR r4, [sp, #320]\n\tLDR r4, =177\n\tSTR r4, [sp, #316]\n\tLDR r4, =178\n\tSTR r4, [sp, #312]\n\tLDR r4, =179\n\tSTR r4, [sp, #308]\n\tLDR r4, =180\n\tSTR r4, [sp, #304]\n\tLDR r4, =181\n\tSTR r4, [sp, #300]\n\tLDR r4, =182\n\tSTR r4, [sp, #296]\n\tLDR r4, =183\n\tSTR r4, [sp, #292]\n\tLDR r4, =184\n\tSTR r4, [sp, #288]\n\tLDR r4, =185\n\tSTR r4, [sp, #284]\n\tLDR r4, =186\n\tSTR r4, [sp, #280]\n\tLDR r4, =187\n\tSTR r4, [sp, #276]\n\tLDR r4, =188\n\tSTR r4, [sp, #272]\n\tLDR r4, =189\n\tSTR r4, [sp, #268]\n\tLDR r4, =190\n\tSTR r4, [sp, #264]\n\tLDR r4, =191\n\tSTR r4, [sp, #260]\n\tLDR r4, =192\n\tSTR r4, [sp, #256]\n\tLDR r4, =193\n\tSTR r4, [sp, #252]\n\tLDR r4, =194\n\tSTR r4, [sp, #248]\n\tLDR r4, =195\n\tSTR r4, [sp, #244]\n\tLDR r4, =196\n\tSTR r4, [sp, #240]\n\tLDR r4, =197\n\tSTR r4, [sp, #236]\n\tLDR r4, =198\n\tSTR r4, [sp, #232]\n\tLDR r4, =199\n\tSTR r4, [sp, #228]\n\tLDR r4, =200\n\tSTR r4, [sp, #224]\n\tLDR r4, =201\n\tSTR r4, [sp, #220]\n\tLDR r4, =202\n\tSTR r4, [sp, #216]\n\tLDR r4, =203\n\tSTR r4, [sp, #212]\n\tLDR r4, =204\n\tSTR r4, [sp, #208]\n\tLDR r4, =205\n\tSTR r4, [sp, #204]\n\tLDR r4, =206\n\tSTR r4, [sp, #200]\n\tLDR r4, =207\n\tSTR r4, [sp, #196]\n\tLDR r4, =208\n\tSTR r4, [sp, #192]\n\tLDR r4, =209\n\tSTR r4, [sp, #188]\n\tLDR r4, =210\n\tSTR r4, [sp, #184]\n\tLDR r4, =211\n\tSTR r4, [sp, #180]\n\tLDR r4, =212\n\tSTR r4, [sp, #176]\n\tLDR r4, =213\n\tSTR r4, [sp, #172]\n\tLDR r4, =214\n\tSTR r4, [sp, #168]\n\tLDR r4, =215\n\tSTR r4, [sp, #164]\n\tLDR r4, =216\n\tSTR r4, [sp, #160]\n\tLDR r4, =217\n\tSTR r4, [sp, #156]\n\tLDR r4, =218\n\tSTR r4, [sp, #152]\n\tLDR r4, =219\n\tSTR r4, [sp, #148]\n\tLDR r4, =220\n\tSTR r4, [sp, #144]\n\tLDR r4, =221\n\tSTR r4, [sp, #140]\n\tLDR r4, =222\n\tSTR r4, [sp, #136]\n\tLDR r4, =223\n\tSTR r4, [sp, #132]\n\tLDR r4, =224\n\tSTR r4, [sp, #128]\n\tLDR r4, =225\n\tSTR r4, [sp, #124]\n\tLDR r4, =226\n\tSTR r4, [sp, #120]\n\tLDR r4, =227\n\tSTR r4, [sp, #116]\n\tLDR r4, =228\n\tSTR r4, [sp, #112]\n\tLDR r4, =229\n\tSTR r4, [sp, #108]\n\tLDR r4, =230\n\tSTR r4, [sp, #104]\n\tLDR r4, =231\n\tSTR r4, [sp, #100]\n\tLDR r4, =232\n\tSTR r4, [sp, #96]\n\tLDR r4, =233\n\tSTR r4, [sp, #92]\n\tLDR r4, =234\n\tSTR r4, [sp, #88]\n\tLDR r4, =235\n\tSTR r4, [sp, #84]\n\tLDR r4, =236\n\tSTR r4, [sp, #80]\n\tLDR r4, =237\n\tSTR r4, [sp, #76]\n\tLDR r4, =238\n\tSTR r4, [sp, #72]\n\tLDR r4, =239\n\tSTR r4, [sp, #68]\n\tLDR r4, =240\n\tSTR r4, [sp, #64]\n\tLDR r4, =241\n\tSTR r4, [sp, #60]\n\tLDR r4, =242\n\tSTR r4, [sp, #56]\n\tLDR r4, =243\n\tSTR r4, [sp, #52]\n\tLDR r4, =244\n\tSTR r4, [sp, #48]\n\tLDR r4, =245\n\tSTR r4, [sp, #44]\n\tLDR r4, =246\n\tSTR r4, [sp, #40]\n\tLDR r4, =247\n\tSTR r4, [sp, #36]\n\tLDR r4, =248\n\tSTR r4, [sp, #32]\n\tLDR r4, =249\n\tSTR r4, [sp, #28]\n\tLDR r4, =250\n\tSTR r4, [sp, #24]\n\tLDR r4, =251\n\tSTR r4, [sp, #20]\n\tLDR r4, =252\n\tSTR r4, [sp, #16]\n\tLDR r4, =253\n\tSTR r4, [sp, #12]\n\tLDR r4, =254\n\tSTR r4, [sp, #8]\n\tLDR r4, =255\n\tSTR r4, [sp, #4]\n\tLDR r4, =256\n\tSTR r4, [sp]\n\tADD sp, sp, #1024\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/variables/negIntDeclaration.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =-1\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/variables/puncCharDeclaration.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tMOV r4, #'!'\n\tSTRB r4, [sp]\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/variables/stringDeclaration.wacc": ".data\n\nmsg_0:\n\t.word 12\n\t.ascii\t\"Hello World!\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =msg_0\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/variables/zeroIntDeclaration.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/variables/_VarNames.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =19\n\tSTR r4, [sp]\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL exit\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/while/fibonacciFullIt.wacc": ".data\n\nmsg_0:\n\t.word 61\n\t.ascii\t\"This program calculates the nth fibonacci number iteratively.\"\nmsg_1:\n\t.word 42\n\t.ascii\t\"Please enter n (should not be too large): \"\nmsg_2:\n\t.word 15\n\t.ascii\t\"The input n is \"\nmsg_3:\n\t.word 28\n\t.ascii\t\"The nth fibonacci number is \"\nmsg_4:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_5:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_6:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_7:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_8:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #16\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, =0\n\tSTR r4, [sp, #12]\n\tADD r4, sp, #12\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #12]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, =0\n\tSTR r4, [sp, #8]\n\tLDR r4, =1\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L0\nL1:\n\tLDR r4, [sp, #8]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #8]\n\tLDR r4, [sp]\n\tLDR r5, [sp, #4]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #12]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #12]\nL0:\n\tLDR r4, [sp, #12]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #16\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_7\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_8\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/while/fibonacciIterative.wacc": ".data\n\nmsg_0:\n\t.word 35\n\t.ascii\t\"The first 20 fibonacci numbers are:\"\nmsg_1:\n\t.word 2\n\t.ascii\t\", \"\nmsg_2:\n\t.word 3\n\t.ascii\t\"...\"\nmsg_3:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_4:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_5:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_6:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #16\n\tLDR r4, =0\n\tSTR r4, [sp, #12]\n\tLDR r4, =0\n\tSTR r4, [sp, #8]\n\tLDR r4, =1\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L0\nL1:\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_int\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #8]\n\tSTR r4, [sp]\n\tLDR r4, [sp, #4]\n\tSTR r4, [sp, #8]\n\tLDR r4, [sp]\n\tLDR r5, [sp, #4]\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp, #12]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #12]\nL0:\n\tLDR r4, [sp, #12]\n\tLDR r5, =20\n\tCMP r4, r5\n\tMOVLT r4, #1\n\tMOVGE r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #16\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_6\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/while/loopCharCondition.wacc": ".data\n\nmsg_0:\n\t.word 8\n\t.ascii\t\"Change c\"\nmsg_1:\n\t.word 36\n\t.ascii\t\"Should print \\\"Change c\\\" once before.\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tMOV r4, #0\n\tSTRB r4, [sp]\n\tB L0\nL1:\n\tMOV r4, #'a'\n\tSTRB r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL0:\n\tLDRSB r4, [sp]\n\tMOV r5, #0\n\tCMP r4, r5\n\tMOVEQ r4, #1\n\tMOVNE r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/while/loopIntCondition.wacc": ".data\n\nmsg_0:\n\t.word 8\n\t.ascii\t\"Change n\"\nmsg_1:\n\t.word 36\n\t.ascii\t\"Should print \\\"Change n\\\" once before.\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tB L0\nL1:\n\tLDR r4, =1\n\tSTR r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL0:\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tCMP r4, r5\n\tMOVNE r4, #1\n\tMOVEQ r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/while/max.wacc": ".data\n\nmsg_0:\n\t.word 12\n\t.ascii\t\"max value = \"\nmsg_1:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_4:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #12\n\tLDR r4, =0\n\tSTR r4, [sp, #8]\n\tLDR r4, =10\n\tSTR r4, [sp, #4]\n\tLDR r4, =17\n\tSTR r4, [sp]\n\tB L0\nL1:\n\tLDR r4, [sp, #4]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #8]\nL0:\n\tLDR r4, [sp]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tLDR r5, [sp, #4]\n\tLDR r6, =0\n\tCMP r5, r6\n\tMOVGT r5, #1\n\tMOVLE r5, #0\n\tORR r4, r4, r5\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #12\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_1\n\tBL p_throw_runtime_error\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/while/min.wacc": ".data\n\nmsg_0:\n\t.word 12\n\t.ascii\t\"min value = \"\nmsg_1:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_4:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #12\n\tLDR r4, =0\n\tSTR r4, [sp, #8]\n\tLDR r4, =10\n\tSTR r4, [sp, #4]\n\tLDR r4, =17\n\tSTR r4, [sp]\n\tB L0\nL1:\n\tLDR r4, [sp, #4]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\n\tLDR r4, [sp, #8]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #8]\nL0:\n\tLDR r4, [sp]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tLDR r5, [sp, #4]\n\tLDR r6, =0\n\tCMP r5, r6\n\tMOVGT r5, #1\n\tMOVLE r5, #0\n\tAND r4, r4, r5\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #8]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #12\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_throw_overflow_error:\n\tLDR r0, =msg_1\n\tBL p_throw_runtime_error\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/while/rmStyleAdd.wacc": ".data\n\nmsg_0:\n\t.word 20\n\t.ascii\t\"initial value of x: \"\nmsg_1:\n\t.word 3\n\t.ascii\t\"(+)\"\nmsg_2:\n\t.word 0\n\t.ascii\t\"\"\nmsg_3:\n\t.word 18\n\t.ascii\t\"final value of x: \"\nmsg_4:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_5:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_6:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_7:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =3\n\tSTR r4, [sp, #4]\n\tLDR r4, =7\n\tSTR r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tB L0\nL1:\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\nL0:\n\tLDR r4, [sp]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_4\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_5\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_7\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/while/rmStyleAddIO.wacc": ".data\n\nmsg_0:\n\t.word 24\n\t.ascii\t\"Enter the first number: \"\nmsg_1:\n\t.word 25\n\t.ascii\t\"Enter the second number: \"\nmsg_2:\n\t.word 20\n\t.ascii\t\"Initial value of x: \"\nmsg_3:\n\t.word 3\n\t.ascii\t\"(+)\"\nmsg_4:\n\t.word 0\n\t.ascii\t\"\"\nmsg_5:\n\t.word 18\n\t.ascii\t\"final value of x: \"\nmsg_6:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_7:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_8:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_9:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_10:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #8\n\tLDR r4, =0\n\tSTR r4, [sp, #4]\n\tLDR r4, =0\n\tSTR r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #4\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tADD r4, sp, #0\n\tMOV r0, r4\n\tBL p_read_int\n\tLDR r4, =msg_2\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tB L0\nL1:\n\tLDR r4, =msg_3\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp, #4]\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tSUBS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\nL0:\n\tLDR r4, [sp]\n\tLDR r5, =0\n\tCMP r4, r5\n\tMOVGT r4, #1\n\tMOVLE r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, =msg_4\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r4, =msg_5\n\tMOV r0, r4\n\tBL p_print_string\n\tLDR r4, [sp, #4]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tADD sp, sp, #8\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_6\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_read_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_7\n\tADD r0, r0, #4\n\tBL scanf\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_8\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_9\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_10\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/while/whileBasic.wacc": ".text\n\n.global main\nmain:\n\tPUSH {lr}\n\tB L0\nL1:\nL0:\n\tMOV r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\n",
    "testcases/valid/while/whileBoolFlip.wacc": ".data\n\nmsg_0:\n\t.word 7\n\t.ascii\t\"flip b!\"\nmsg_1:\n\t.word 11\n\t.ascii\t\"end of loop\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #1\n\tMOV r4, #1\n\tSTRB r4, [sp]\n\tB L0\nL1:\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDRSB r4, [sp]\n\tEOR r4, r4, #1\n\tSTRB r4, [sp]\nL0:\n\tLDRSB r4, [sp]\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tADD sp, sp, #1\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n",
    "testcases/valid/while/whileCount.wacc": ".data\n\nmsg_0:\n\t.word 20\n\t.ascii\t\"Can you count to 10?\"\nmsg_1:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_2:\n\t.word 1\n\t.ascii\t\"\\0\"\nmsg_3:\n\t.word 3\n\t.ascii\t\"%d\\0\"\nmsg_4:\n\t.word 82\n\t.ascii\t\"OverflowError: the result is too small/large to store in a 4-byte signed-integer.\\n\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tSUB sp, sp, #4\n\tLDR r4, =1\n\tSTR r4, [sp]\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tB L0\nL1:\n\tLDR r4, [sp]\n\tMOV r0, r4\n\tBL p_print_int\n\tBL p_print_ln\n\tLDR r4, [sp]\n\tLDR r5, =1\n\tADDS r4, r4, r5\n\tBLVS p_throw_overflow_error\n\tSTR r4, [sp]\nL0:\n\tLDR r4, [sp]\n\tLDR r5, =10\n\tCMP r4, r5\n\tMOVLE r4, #1\n\tMOVGT r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tADD sp, sp, #4\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_1\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_int:\n\tPUSH {lr}\n\tMOV r1, r0\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_throw_overflow_error:\n\tLDR r0, =msg_4\n\tBL p_throw_runtime_error\np_throw_runtime_error:\n\tBL p_print_string\n\tMOV r0, #-1\n\tBL exit\n",
    "testcases/valid/while/whileFalse.wacc": ".data\n\nmsg_0:\n\t.word 10\n\t.ascii\t\"looping...\"\nmsg_1:\n\t.word 11\n\t.ascii\t\"end of loop\"\nmsg_2:\n\t.word 5\n\t.ascii\t\"%.*s\\0\"\nmsg_3:\n\t.word 1\n\t.ascii\t\"\\0\"\n\n.text\n\n.global main\nmain:\n\tPUSH {lr}\n\tB L0\nL1:\n\tLDR r4, =msg_0\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\nL0:\n\tMOV r4, #0\n\tCMP r4, #1\n\tBEQ L1\n\tLDR r4, =msg_1\n\tMOV r0, r4\n\tBL p_print_string\n\tBL p_print_ln\n\tLDR r0, =0\n\tPOP {pc}\n\t.ltorg\np_print_string:\n\tPUSH {lr}\n\tLDR r1, [r0]\n\tADD r2, r0, #4\n\tLDR r0, =msg_2\n\tADD r0, r0, #4\n\tBL printf\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\np_print_ln:\n\tPUSH {lr}\n\tLDR r0, =msg_3\n\tADD r0, r0, #4\n\tBL puts\n\tMOV r0, #0\n\tBL fflush\n\tPOP {pc}\n"
}