# WACC Standard Library

# Program:

begin


  ############################################################
  # Char Methods
  ############################################################

  # we check the upper bound first
  # this is because the ord of a random character is
  # more likely to be higher than these ranges
  # and so we can short circuit faster and
  # check just 1 condition

  bool isdigit(char c) is
    # checks if c is a digit
    return (((ord c) <= (ord '9')) && ((ord c) >= (ord '0')))
  end

  bool islower(char c) is
    # checks if c is lowercase alphabet char
    return (((ord c) <= (ord 'z')) && ((ord c) >= (ord 'a')))
  end

  bool isupper(char c) is
    # checks if c is uppercase alphabet char
    return (((ord c) <= (ord 'Z')) && ((ord c) >= (ord 'A')))
  end

  bool isalpha(char c) is
    # checks if c is alphabet char
    bool lower = call islower(c);
    bool upper = call isupper(c);
    return (lower || upper)
  end

  bool isalnum(char c) is
    # checks if c is alphanumeric
    bool digit = call isdigit(c);
    bool alpha = call isalpha(c);
    return (digit || alpha)
  end

  bool isspace(char c) is
    # checks if c is a space
    return ((ord c) == (ord ' '))
  end

  bool isnewline(char c) is
    # checks if c is a newline
    return ((ord c) == (ord '\n'))
  end

  char tolower(char c) is
    # converts c to lowercase
    int offset = (ord 'a') - (ord 'A');
    int n = ord c;
    n = n + offset;
    return (chr n)
  end

  char toupper(char c) is
    # converts c to uppercase
    int offset = (ord 'A') - (ord 'a');
    int n = ord c;
    n = n + offset;
    return (chr n)
  end

  ############################################################
  ############################################################


  ############################################################
  # Math Methods
  ############################################################

  int min(int[] xs) is
    # returns the minimum element in the array
    int[] arr = xs;
    int m = arr[0];
    int i = 1;
    int arrLen = len arr;
    while (i < arrLen) do
      if (arr[i] < m)
        then
          m = arr[i];
          i = i + 1
        else
          i = i + 1
      fi
    done;
    return m
  end

  int max(int[] xs) is
    # returns the maximum element in the array
    int[] arr = xs;
    int m = arr[0];
    int i = 1;
    int arrLen = len arr;
    while (i < arrLen) do
      if (arr[i] > m)
        then
          m = arr[i];
          i = i + 1
        else
          i = i + 1
      fi
    done;
    return m
  end

  int abs(int x) is
    # returns the absolute value of x
    if (x < 0)
      then
        return -x
      else
        return x
    fi
  end

  int rand(int prevRand) is
    # returns the next random integer, given the previous
    # to get the first random integer, just provide a seed
    # seed should be between 0 and 100
    int next = prevRand * 11035152; # not quite LCG
    next = next + 11; # 11 because we are group WACC_11
    next = next / 65536;
    next = next % 32768;
    return next
  end

  int pow(int x, int y) is
    int base = x;
    int exp = y;
    if (exp == 0)
      then
        # x^0 = 1
        return 1
      else
        # raise to power
        int n = base;
        int i = 1;
        while (i < exp) do
          n = n * base;
          i = i + 1
        done;
        return n
    fi
  end

  ############################################################
  ############################################################


  ############################################################
  # String Methods
  ############################################################

  int find(char c, char[] xs) is
    # similar to indexof, finds first index of c in str
    char[] arr = xs;
    int i = 0;
    int arrLen = len arr;
    while (i < arrLen) do
      if (arr[i] == c)
        then
          return i + 1
        else
          i = i + 1
      fi
    done;
    return -1
  end

  ############################################################
  ############################################################


  ############################################################
  # Array Methods
  ############################################################

  bool any(bool x, bool[] xs) is
    # checks if any values in array are true/false as set by x
    bool[] arr = xs;
    int i = 0;
    int arrLen = len arr;
    while (i < arrLen) do
      if (arr[i] == x)
        then
          return true
        else
          i = i + 1
      fi
    done;
    return false
  end

  int indexOf(int x, int[] xs) is
    # gets the first index of x in arr
    int[] arr = xs;
    int i = 0;
    int arrLen = len arr;
    while (i < arrLen) do
      if (arr[i] == x)
        then
          return i + 1
        else
          i = i + 1
      fi
    done;
    return -1
  end

  ############################################################
  ############################################################

  skip
end